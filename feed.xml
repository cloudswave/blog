<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="rss.xsl" type="text/xsl"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
>
    <channel>
            <title><![CDATA[EthanZhu's Blog]]></title>
            <link>https://github.com/cloudswave/blog</link>
        <atom:link href="https://github.com/cloudswave/blog/feed.xml" rel="self" type="application/rss+xml" />
            <description><![CDATA[RSS feed of EthanZhu's blog]]></description>
        <generator>IssueBlogAction</generator>
        <webMaster>bxb100@outlook.com (@bxb100)</webMaster>
            <language>zh-cn</language>
            <image>
                <url>https://cdn.jsdelivr.net/gh/cloudswave/blog/blog.png</url>
                    <title><![CDATA[EthanZhu's Blog]]></title>
                <link>https://github.com/cloudswave/blog</link>
            </image>
        <lastBuildDate>Thu, 31 Aug 2023 00:07:12 GMT</lastBuildDate>
            <item>
                <title><![CDATA[用浏览器远程控制 Android 手机，搭建云手机]]></title>
                    <description><![CDATA[<p>项目地址： <a href="https://github.com/NetrisTV/ws-scrcpy">GitHub – NetrisTV/ws-scrcpy: Web client prototype for scrcpy.</a></p>
<h3><a id="user-content-docker版" class="anchor" aria-hidden="true" tabindex="-1" href="#docker版"><span aria-hidden="true" class="octicon octicon-link"></span></a>docker版</h3>
<pre><code># docker run --name ws-scrcpy -d -p 8000:8000 scavin/ws-scrcpy
docker run --name ws-scrcpy -d --net=host  scavin/ws-scrcpy   # 使用--net=host 保证能访问到安卓设备
docker exec ws-scrcpy adb connect 安卓IP地址:5555 # 如果使用zerotier实现内网穿透，则在zerotier后台查看分配到ip
</code></pre>
<p>访问：<a href="http://%E6%9C%8D%E5%8A%A1%E5%99%A8ip:8000" rel="nofollow">http://服务器ip:8000</a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/cloudswave/blog/assets/5915548/261e036f-4e9d-4878-8ea8-bf603866cf64"><img width="945" alt="image" src="https://github.com/cloudswave/blog/assets/5915548/261e036f-4e9d-4878-8ea8-bf603866cf64" style="max-width: 100%;"></a></p>
<h3><a id="user-content-andorid手机打开网络调试" class="anchor" aria-hidden="true" tabindex="-1" href="#andorid手机打开网络调试"><span aria-hidden="true" class="octicon octicon-link"></span></a>Andorid手机打开网络调试</h3>
<ul>
<li>电脑安装 adb工具套件<a href="https://developer.android.com/studio/releases/platform-tools" rel="nofollow">SDK Platform Tools</a>
</li>
<li>打开开发者模式</li>
<li>使用 USB 连接 Android 设备，并授权</li>
<li>终端输入 adb tcpip 5555</li>
</ul>
<h3><a id="user-content-安装zerotier实现内网穿透" class="anchor" aria-hidden="true" tabindex="-1" href="#安装zerotier实现内网穿透"><span aria-hidden="true" class="octicon octicon-link"></span></a>安装zerotier实现内网穿透</h3>
<ul>
<li>安卓手机直接下载zerotier app：<a href="https://www.zerotier.com/download/" rel="nofollow">https://www.zerotier.com/download/</a>
</li>
<li>服务器端docker版</li>
</ul>
<pre><code>官方镜像：https://registry.hub.docker.com/r/bltavares/zerotier
拉取镜像
docker pull bltavares/zerotier
配置镜像
docker run --device=/dev/net/tun \
--name zerotier-one \
--net=host \
--restart=always \
--cap-add=NET_ADMIN \
--cap-add=SYS_ADMIN \
-v /var/lib/zerotier-one:/var/lib/zerotier-one \
bltavares/zerotier:latest
加入zerotier网络
docker exec zerotier-one zerotier-cli join [网络ID]
显示 200 join ok 即添加成功
</code></pre>
<p>debian版：</p>
<pre><code>添加Zerotier存储库
curl -s https://install.zerotier.com | sudo bash
安装Zerotier
sudo apt-get install zerotier-one
启动Zerotier
sudo systemctl start zerotier-one
查看Zerotier状态
sudo zerotier-cli status
加入网络
zerotier-cli join [网络ID]
</code></pre>
<p>也可以使用frp或者nps来实现内网穿透达到对安卓的控制</p>
<h3><a id="user-content-参考" class="anchor" aria-hidden="true" tabindex="-1" href="#参考"><span aria-hidden="true" class="octicon octicon-link"></span></a>参考</h3>
<ul>
<li><a href="https://www.appinn.com/ws-scrcpy" rel="nofollow">https://www.appinn.com/ws-scrcpy</a></li>
<li><a href="https://github.com/Genymobile/scrcpy">https://github.com/Genymobile/scrcpy</a></li>
</ul>
]]></description>
                    <pubDate>Thu, 31 Aug 2023 00:06:51 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/34</guid>
                <link>https://github.com/cloudswave/blog/issues/34</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[开源免费远程控制软件RustDesk]]></title>
                    <description><![CDATA[<p>简介：目前最友好的开源远程桌面软件，开箱即用，无需任何配置，全平台支持，完美替代 TeamViewer、ToDesk、AnyDesk等
开源地址：<a href="https://github.com/rustdesk">https://github.com/rustdesk</a>
软件下载地址：<a href="https://github.com/rustdesk/rustdesk/releases">https://github.com/rustdesk/rustdesk/releases</a>
网页端：<a href="http://45.76.181.120:8080/#/" rel="nofollow">http://45.76.181.120:8080/#/</a></p>

]]></description>
                    <pubDate>Sat, 26 Aug 2023 08:55:48 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/33</guid>
                <link>https://github.com/cloudswave/blog/issues/33</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>软件推荐</category>
            </item>
            <item>
                <title><![CDATA[安卓脱壳破解系统]]></title>
                    <description><![CDATA[<p>下载地址：
小飞机网盘，下载不限速、一键转存无上限、在线播放无损音视频。复制这段内容打开「小飞机网盘」APP即可获取
链接：<a href="https://www.feijix.com/s/jkuL1GV" rel="nofollow">https://www.feijix.com/s/jkuL1GV</a></p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/cloudswave/blog/assets/5915548/6ce66fd0-2679-4579-ac54-8f3434cb4053"><img src="https://github.com/cloudswave/blog/assets/5915548/6ce66fd0-2679-4579-ac54-8f3434cb4053" alt="Screenshot_2023-08-14-21-03-19-75_bebc5b24fcfa09fec0f188d50da87968" style="max-width: 100%;"></a></p>
]]></description>
                    <pubDate>Mon, 14 Aug 2023 13:08:45 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/32</guid>
                <link>https://github.com/cloudswave/blog/issues/32</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[alist编译记录]]></title>
                    <description><![CDATA[<h2><a id="user-content-服务器环境" class="anchor" aria-hidden="true" tabindex="-1" href="#服务器环境"><span aria-hidden="true" class="octicon octicon-link"></span></a>服务器环境</h2>
<p>Linux version 3.10.0-327.el7.x86_64 (<a href="mailto:builder@kbuilder.dev.centos.org">builder@kbuilder.dev.centos.org</a>) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu Nov 19 22:10:57 UTC 2015</p>
<h2><a id="user-content-前端" class="anchor" aria-hidden="true" tabindex="-1" href="#前端"><span aria-hidden="true" class="octicon octicon-link"></span></a>前端</h2>
<pre><code>yum install npm
npm install -g npm@9.5.0
npm install pnpm -g
git clone --recursive https://github.com/alist-org/alist-web.git
cd alist-web
pnpm run build
</code></pre>
<h2><a id="user-content-后端" class="anchor" aria-hidden="true" tabindex="-1" href="#后端"><span aria-hidden="true" class="octicon octicon-link"></span></a>后端</h2>
<pre><code>yum install screen
screen -R alist # 开screen避免掉线编译中断
rpm --import https://mirror.go-repo.io/centos/RPM-GPG-KEY-GO-REPO
curl -s https://mirror.go-repo.io/centos/go-repo.repo | tee /etc/yum.repos.d/go-repo.repo
yum install golang
git clone https://github.com/alist-org/alist.git
cd alist
vi build-local.sh # 新建一个本地编译的脚本，复制以下内容
------
rm -rf ./public/dist/*
cp -r ../alist-web/dist ./public/ # 注意前端代码路径
appName="alist"
builtAt="$(date +'%F %T %z')"
goVersion=$(go version | sed 's/go version //')
gitAuthor=$(git show -s --format='format:%aN &lt;%ae&gt;' HEAD)
gitCommit=$(git log --pretty=format:"%h" -1)
version=$(git describe --long --tags --dirty --always)
webVersion=$(wget -qO- -t1 -T2 "https://api.github.com/repos/alist-org/alist-web/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/\"//g;s/,//g;s/ //g')
ldflags="\
-w -s \
-X 'github.com/alist-org/alist/v3/internal/conf.BuiltAt=$builtAt' \
-X 'github.com/alist-org/alist/v3/internal/conf.GoVersion=$goVersion' \
-X 'github.com/alist-org/alist/v3/internal/conf.GitAuthor=$gitAuthor' \
-X 'github.com/alist-org/alist/v3/internal/conf.GitCommit=$gitCommit' \
-X 'github.com/alist-org/alist/v3/internal/conf.Version=$version' \
-X 'github.com/alist-org/alist/v3/internal/conf.WebVersion=$webVersion' \
"
go build -ldflags="$ldflags" 
-----

bash build-local.sh  # 编译

./alist admin # 查看管理员信息
./alist server # 启动服务
vi ./data/config.json # 可修改端口
</code></pre>
<h2><a id="user-content-国际化" class="anchor" aria-hidden="true" tabindex="-1" href="#国际化"><span aria-hidden="true" class="octicon octicon-link"></span></a>国际化</h2>
<pre><code>方案1：
# crowdin 环境变量配置，先去crowdin官网注册获取api-token，创建一个project获取project id
# https://crowdin.com/project/alist/zh-CN
export CROWDIN_PROJECT_ID=***
export CROWDIN_PERSONAL_TOKEN=***
pnpm run i18n:release

方案2：直接下载中文翻译文件
[root@ecs-G3x6u alist]# wget https://crowdin.com/backend/download/project/alist/zh-CN.zip --no-check-certificate
[root@ecs-G3x6u alist]# unzip zh-CN.zip 
Archive:  zh-CN.zip
   creating: src/
   creating: src/lang/
   creating: src/lang/zh-CN/
  inflating: src/lang/zh-CN/settings.json  
  inflating: src/lang/zh-CN/metas.json  
  inflating: src/lang/zh-CN/settings_other.json  
  inflating: src/lang/zh-CN/manage.json  
  inflating: src/lang/zh-CN/storages.json  
  inflating: src/lang/zh-CN/login.json  
  inflating: src/lang/zh-CN/drivers.json  
  inflating: src/lang/zh-CN/global.json  
  inflating: src/lang/zh-CN/users.json  
  inflating: src/lang/zh-CN/home.json  
 extracting: src/lang/zh-CN/index.json  
  inflating: src/lang/zh-CN/tasks.json  
  inflating: src/lang/zh-CN/br.json  
  inflating: src/lang/zh-CN/indexes.json  
[root@ecs-G3x6u alist]# ls
alist  alist-web  src  zh-CN.zip
[root@ecs-G3x6u alist]# cp -r ./src/lang/zh-CN ./alist-web/src/
app/        components/ hooks/      index.d.ts  lang/       main.tsx    pages/      store/      types/      utils/      
[root@ecs-G3x6u alist]# cp -r ./src/lang/zh-CN ./alist-web/src/lang/
[root@ecs-G3x6u alist]# cd alist-web/
[root@ecs-G3x6u alist-web]# node ./scripts/i18n.mjs
</code></pre>
<h2><a id="user-content-参考" class="anchor" aria-hidden="true" tabindex="-1" href="#参考"><span aria-hidden="true" class="octicon octicon-link"></span></a>参考</h2>
<ul>
<li><a href="https://alist.nn.ci/zh/guide/install/source.html" rel="nofollow">https://alist.nn.ci/zh/guide/install/source.html</a></li>
<li><a href="https://blog.csdn.net/qq_25919879/article/details/128400309" rel="nofollow">https://blog.csdn.net/qq_25919879/article/details/128400309</a></li>
</ul>

]]></description>
                    <pubDate>Sat, 01 Jul 2023 14:28:26 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/29</guid>
                <link>https://github.com/cloudswave/blog/issues/29</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[Termux通过ubuntu安装宝塔面板]]></title>
                    <description><![CDATA[<h1><a id="user-content-termux下atilo安装ubuntu" class="anchor" aria-hidden="true" tabindex="-1" href="#termux下atilo安装ubuntu"><span aria-hidden="true" class="octicon octicon-link"></span></a>Termux下Atilo安装ubuntu</h1>
<p>ubuntu或者debian支持64或者32位架构cpu
参考：<a href="https://www.jianshu.com/p/a9b30ea2ae66" rel="nofollow">https://www.jianshu.com/p/a9b30ea2ae66</a></p>
<h1><a id="user-content-安装宝塔" class="anchor" aria-hidden="true" tabindex="-1" href="#安装宝塔"><span aria-hidden="true" class="octicon octicon-link"></span></a>安装宝塔</h1>
<p>uname -m查看cpu架构，aarch64代表64位
参考：<a href="https://gitee.com/pdusb/pdusb-fast-btpanel" rel="nofollow">https://gitee.com/pdusb/pdusb-fast-btpanel</a>
64位ubuntu下：</p>
<pre><code>git clone https://gitee.com/pdusb/pdusb-fast-btpanel.git
cd pdusb-fast-btpanel
./pdbolt-inst-bt-acel.sh
bash /tmp/btp/pdbolt-bt-install/install.sh

/etc/init.d/bt restart
# 进入宝塔工具面板，可查看修改端口和密码
bt
</code></pre>
<p>32位ubuntu或者debian只能安装5.9版面板, python2.7：</p>
<pre><code>apt-get install python-setuptools
wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh
</code></pre>
<p>参考<a href="https://www.234du.com/1194.html" rel="nofollow">宝塔(BT-Panel) Linux 面板 5.9 开心版教程</a>
<a href="https://blog.csdn.net/lovelinchuangfeng/article/details/123843230" rel="nofollow">玩客云安装宝塔面板5.9</a></p>
<h1><a id="user-content-错误处理记录" class="anchor" aria-hidden="true" tabindex="-1" href="#错误处理记录"><span aria-hidden="true" class="octicon octicon-link"></span></a>错误处理记录</h1>
<ul>
<li>
<p>ERROR: cannot verify download.bt.cn's certificate, issued by ‘CN=sslTrus (RSA) OV CA,O=sslTrus,C=CN’: Unable to locally verify the issuer's authority. To connect to download.bt.cn insecurely, use `--no-check-certificate' ERROR: Download python env fielded.
关闭证书验证：echo "check_certificate = off" &gt;&gt; ~/.wgetrc</p>
</li>
<li>
<p>报错chmod: cannot access '/tmp/btp/pyenv/bin/python3.7': Operation not permitted...</p>
</li>
</ul>
<pre><code>...
root@localhost:~/pdusb-fast-btpanel# chmod 777 /tmp/btp/pyenv/bin/ -R
chmod: cannot access '/tmp/btp/pyenv/bin/python3.7': Operation not permitted
chmod: cannot access '/tmp/btp/pyenv/bin/.l2s.python3.70001': Operation not permitted
chmod: cannot access '/tmp/btp/pyenv/bin/python3.7m': Operation not permitted
...
</code></pre>
<p>解压pyenv-ubuntu2004-3.7.8-aarch64.tar.xz出错导致，重新解压后替换出错文件</p>
<ul>
<li>宝塔启动失败</li>
</ul>
<pre><code>...
Traceback (most recent call last):
  File "/www/server/panel/BT-Panel", line 27, in &lt;module&gt;
    from BTPanel import app,sys,public
  File "/www/server/panel/BTPanel/__init__.py", line 11, in &lt;module&gt;
    import json
ModuleNotFoundError: No module named 'json'
...
</code></pre>
<p>权限修复：chmod 777 -R /www</p>
<ul>
<li>ubuntu bash报错：groups: cannot find name for group ID ***</li>
</ul>
<pre><code>groups: cannot find name for group ID 1015
groups: cannot find name for group ID 1028
groups: cannot find name for group ID 3003
groups: cannot find name for group ID 9997
groups: cannot find name for group ID 50062
</code></pre>
<p>termux在安装ubuntu运行的时候出现了goups: cannot find name for group ID，由于termux安装ubuntu后没有给原本Android的系统用户组赋予名称导致, 解决办法：</p>
<pre><code>echo "1015:x:1015:
1028:x:1028:
3003:x:3003:
50062:x:50062:
9997:x:9997:" &gt;&gt;/etc/group
</code></pre>
<p><a href="https://blog.csdn.net/babytiger/article/details/112121506" rel="nofollow">参考</a></p>
<ul>
<li>宝塔安装报错：ImportError: No module named setuptools
阅读install.sh脚本，把已经执行过的命令注释，排查哪行命令报错，执行的时候发现宝塔需要使用python2.7的pip，而apt命令安装的pip会安装到python3里了。</li>
</ul>
<pre><code>curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py 
python2 get-pip.py
然后将pip命令链接到bin目录下
</code></pre>
<ul>
<li>启动宝塔成功，但是无法显示登录页，显示500错误
查看宝塔的/etc/init.d/bt 脚本，尝试找到错误日志保存路径如下，cat /tmp/panelBoot.pl ，发现cp: cannot create regular file '/dev/shm/session.db'，修改/www/server/panel/main.py, 把/dev/shm/session.db路径修改成/tmp/session.db</li>
</ul>
<pre><code>nohup python main.pyc `cat data/port.pl` &gt; /tmp/panelBoot.pl 2&gt;&amp;1 &amp; 
</code></pre>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/215061606-14bf121c-db32-4397-8084-ffebc7fd2965.png"><img width="329" alt="image" src="https://user-images.githubusercontent.com/5915548/215061606-14bf121c-db32-4397-8084-ffebc7fd2965.png" style="max-width: 100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/215062467-bd13cfeb-a6a7-42aa-af81-d4bab63b8af2.png"><img width="395" alt="image" src="https://user-images.githubusercontent.com/5915548/215062467-bd13cfeb-a6a7-42aa-af81-d4bab63b8af2.png" style="max-width: 100%;"></a></p>

]]></description>
                    <pubDate>Sun, 28 May 2023 01:22:55 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/20</guid>
                <link>https://github.com/cloudswave/blog/issues/20</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[chatgpt以及同类型产品体验]]></title>
                    <description><![CDATA[<ul>
<li><a href="https://app.slack.com/client/T058B789QC8/D057MGKRB1Q" rel="nofollow">https://app.slack.com/client/T058B789QC8/D057MGKRB1Q</a></li>
<li><a href="https://chatbot.theb.ai" rel="nofollow">https://chatbot.theb.ai</a></li>
</ul>
]]></description>
                    <pubDate>Sat, 20 May 2023 03:53:53 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/31</guid>
                <link>https://github.com/cloudswave/blog/issues/31</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[docker版alist和aria2配合使用]]></title>
                    <description><![CDATA[<pre><code>docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 --name="alist" xhofe/alist:latest

docker run -d \
--name aria2 \
--restart unless-stopped \
--log-opt max-size=1m \
-e PUID=$UID \
-e PGID=$GID \
-e UMASK_SET=022 \
-e RPC_SECRET=pac_password \
-e RPC_PORT=6800 \
-e LISTEN_PORT=6888 \
-p 16800:6800 \
-p 16888:6888 \
-p 16888:6888/udp \
-v /root/aria2/config:/config \
-v /etc/alist/temp/downloads:/downloads \
-v /etc/alist/temp/aria2:/opt/alist/data/temp/aria2 \
p3terx/aria2-pro
</code></pre>
<p>-v /etc/alist/temp/aria2:/opt/alist/data/temp/aria2 注意这个地方是为了让离线下载路径可以共享，并且只能在同一台服务器上否则离线下载后复制到某个存储下面时会报transfer失败
参考：<a href="https://alist.nn.ci/zh/guide/install/docker.html" rel="nofollow">https://alist.nn.ci/zh/guide/install/docker.html</a></p>

]]></description>
                    <pubDate>Wed, 15 Mar 2023 18:28:57 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/12</guid>
                <link>https://github.com/cloudswave/blog/issues/12</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[试用new bing]]></title>
                    <description><![CDATA[<ol>
<li>使用梯子切换ip到国外</li>
<li>访问<a href="https://www.bing.com/new" rel="nofollow">https://www.bing.com/new</a>，如果自动跳转走了，清理下cookie</li>
</ol>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/224495654-3066aa80-67b0-43fa-b937-02b0544a03ef.png"><img width="1303" alt="截屏2023-03-12 上午12 21 09" src="https://user-images.githubusercontent.com/5915548/224495654-3066aa80-67b0-43fa-b937-02b0544a03ef.png" style="max-width: 100%;"></a></p>
]]></description>
                    <pubDate>Sat, 11 Mar 2023 16:21:35 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/30</guid>
                <link>https://github.com/cloudswave/blog/issues/30</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[油猴脚本-goodreads]]></title>
                    <description><![CDATA[<pre><code>// ==UserScript==
// @name         豆瓣读书goodreads
// @namespace    https://github.com/cloudswave/
// @version      0.1.0
// @description  从goodreads摘取评分显示在豆瓣读书条目页面
// @author       ethanzhu
// @match        https://book.douban.com/subject/*
// @connect      www.goodreads.com
// @grant        GM_xmlhttpRequest
// @license      MIT
// ==/UserScript==

function buildCommentItem(props) {
    return `
&lt;li class="comment-item" data-cid="549875751"&gt;
    &lt;div class="comment"&gt;
        &lt;h3&gt;
            &lt;span class="comment-info"&gt;
                &lt;a href=${props.url}&gt;${props.author}&lt;/a&gt;
                &lt;span class="user-stars allstar${props.rating}0 rating" title="推荐"&gt;&lt;/span&gt;
                &lt;span&gt;${props.date}&lt;/span&gt;
            &lt;/span&gt;
        &lt;/h3&gt;
        &lt;p class="comment-content"&gt;
            &lt;span class="short"&gt;${props.content}&lt;/span&gt;
        &lt;/p&gt;
    &lt;/div&gt;
&lt;/li&gt;
`
}

function buildRatingInfo(props, bookId) {
    const starValue = Math.round(props.rating) * 5
    const url = `https://www.goodreads.com/book/show/${bookId}`
    return `
    &lt;div class="rating_wrap clearbox" rel="v:rating"&gt;
        &lt;div class="rating_logo"&gt;goodreads评分&lt;/div&gt;
        &lt;div class="rating_self clearfix" typeof="v:Rating"&gt;
            &lt;strong class="ll rating_num " property="v:average"&gt; ${props.rating} &lt;/strong&gt;
            &lt;span property="v:best" content="10.0"&gt;&lt;/span&gt;
            &lt;div class="rating_right "&gt;
                &lt;div class="ll bigstar${starValue}"&gt;&lt;/div&gt;
                &lt;div class="rating_sum"&gt;
                    &lt;span class=""&gt;
                        &lt;a href="${url}" class="rating_people"&gt;&lt;span property="v:votes"&gt;${props.count}&lt;/span&gt;人评价&lt;/a&gt;
                    &lt;/span&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    `
}

function getISBN() {
    const metaInfo = document.querySelector('head &gt; script[type="application/ld+json"]')
    if (metaInfo) {
        return JSON.parse(metaInfo.textContent)['isbn']
    }
}

function isEnglishBook(isbn) {
    return (typeof isbn === 'string' &amp;&amp; isbn[3] === '0')
}

function Request(url, method, opt = {}) {
    Object.assign(opt, {
        url,
        timeout: 5000,
        method: method
    })

    return new Promise((resolve, reject) =&gt; {
        opt.onerror = opt.ontimeout = reject
        opt.onload = resolve
        GM_xmlhttpRequest(opt)
    })
}


function parseBooklogRating(doc) {
    const ratingDiv = doc.querySelector('div[class="rating-value"]')
    const rating = ((+ratingDiv.innerText.split('\n')[0])*2).toFixed(1)
    const count = +doc.querySelector('span[itemprop="reviewCount"]').innerText
    return {
        rating,
        count
    }
}

function ISBN13ToISBN10(isbn13) {
    const commonChars = isbn13.slice(3, -1)
    let sum = 0
    for (const [idx, char] of Array.from(commonChars).entries()) {
        sum += (10 - idx) * parseInt(char)
    }
    let checkDigest = (11 - (sum % 11)) % 11
    checkDigest = checkDigest !== 10 ? checkDigest.toString() : 'X'
    return commonChars + checkDigest
}

(function () {
    'use strict'
    const isbn = getISBN()
    if (!(isbn &amp;&amp; isEnglishBook(isbn))) {
        // return
    }
    console.log(isbn);
    const navTab = document.querySelector('div[class="nav-tab"]')
    navTab.firstElementChild.insertAdjacentHTML('beforeend', `&lt;span&gt;/&lt;span&gt;&lt;a class="short-comment-tabs" href="booklog" data-tab="booklog"&gt;ブクログ&lt;/a&gt;`)
    const commentListWrapper = document.getElementById('comment-list-wrapper')
    commentListWrapper.insertAdjacentHTML('beforeend', `&lt;div id="comments" class="comment-list booklog noshow"&gt;&lt;ul id="booklog-review-list"&gt;&lt;/ul&gt;&lt;/div&gt;`)
    const booklogReviewList = document.getElementById('booklog-review-list')
    const RatingInfoList = document.getElementById('interest_sectl')
    const isbn10 = ISBN13ToISBN10(isbn)


    Request(`https://www.goodreads.com/book/auto_complete?format=json&amp;q=${isbn}`, 'GET').then(res =&gt; {
        // console.log(res);
        const response = JSON.parse(res.response);
        if(response.length === 0) {
            console.log(`goodreads ${isbn} not found!!!`);
            RatingInfoList.insertAdjacentHTML('beforeend', '&lt;span class=""&gt;goodreads暂无记录&lt;/span&gt;')
            return Promise.reject(0);
        }
        const bookId = response[0].bookId;
        console.log(`goodreads found bookId ${bookId}`);
        RatingInfoList.insertAdjacentHTML('beforeend', buildRatingInfo({rating: response[0].avgRating*2, count: response[0].ratingsCount}, bookId))
        return bookId;
    }).then(bookId =&gt; {
/*         return Request(`https://www.goodreads.com/book/show/${bookId}`, 'GET').then(res =&gt; {
            console.log(res);
             const responseText = res.responseText;
             return new DOMParser().parseFromString(responseText, "text/html")
        }); */
    }).then(doc =&gt; {
        // console.log(doc);
        // RatingInfoList.insertAdjacentHTML('beforeend', buildRatingInfo(parseBooklogRating(doc)))
    })
})();
</code></pre>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/218773802-a5bc35aa-7824-46a1-b9be-61db7c4ad511.png"><img src="https://user-images.githubusercontent.com/5915548/218773802-a5bc35aa-7824-46a1-b9be-61db7c4ad511.png" alt="image" style="max-width: 100%;"></a></p>
]]></description>
                    <pubDate>Wed, 15 Feb 2023 04:43:09 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/28</guid>
                <link>https://github.com/cloudswave/blog/issues/28</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[小米2sc搞机记录]]></title>
                    <description><![CDATA[<h1><a id="user-content-硬件信息" class="anchor" aria-hidden="true" tabindex="-1" href="#硬件信息"><span aria-hidden="true" class="octicon octicon-link"></span></a>硬件信息</h1>
<pre><code># lscpu
Architecture:         armv7l
Byte Order:           Little Endian
CPU(s):               4
On-line CPU(s) list:  0
Off-line CPU(s) list: 1-3
Thread(s) per core:   1
Core(s) per socket:   1
Socket(s):            1
Vendor ID:            Qualcomm
Model:                0
Model name:           Krait
Stepping:             0x1
CPU max MHz:          1728.0000
CPU min MHz:          384.0000
BogoMIPS:             13.53
Flags:                swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4
</code></pre>
<h1><a id="user-content-安装termux" class="anchor" aria-hidden="true" tabindex="-1" href="#安装termux"><span aria-hidden="true" class="octicon octicon-link"></span></a>安装termux</h1>
<p><a href="https://github.com/termux/termux-app/actions/workflows/debug_build.yml?query=branch%3Amaster+">最新bulid下载地址</a>，选择32位armv7架构安装包</p>
<h1><a id="user-content-安装atilo和debian" class="anchor" aria-hidden="true" tabindex="-1" href="#安装atilo和debian"><span aria-hidden="true" class="octicon octicon-link"></span></a>安装atilo和debian</h1>
<pre><code>echo "deb [trusted=yes arch=all] https://yadominjinta.github.io/files/ termux extras" &gt;&gt; $PREFIX/etc/apt/sources.list.d/atilo.list
apt update &amp;&amp; apt install atilo-cn
atilo images #可以安装的镜像列表
atilo pull debian # 尝试过使用ubuntu，但是感觉ubuntu问题比较多故换成debian
ls ~/.atilo #可以备份该路径以便日后有问题恢复系统
tmux new -d -s debian 'atilo run debian' # 使用tmux可以保证离线后台运行
</code></pre>
<h1><a id="user-content-debian安装大圣面板" class="anchor" aria-hidden="true" tabindex="-1" href="#debian安装大圣面板"><span aria-hidden="true" class="octicon octicon-link"></span></a>debian安装大圣面板</h1>
<pre><code>tmux a -t debian
apt update &amp;&amp; apt install curl
apt install gunicorn
curl -fsSL https://cdn.jsdelivr.net/gh/midoks/mdserver-web@latest/scripts/install.sh | bash

# 面板常用命令
mw restart
mw default
</code></pre>
<p>安装完成后会打印端口等信息，可能有warning可以忽略，访问面板后台后可以安装OpenResty 1.21.4.1、PHP[APT]-73、MySQL[APT] 5.7</p>
<h2><a id="user-content-问题记录" class="anchor" aria-hidden="true" tabindex="-1" href="#问题记录"><span aria-hidden="true" class="octicon octicon-link"></span></a>问题记录</h2>
<ul>
<li>安装cryptography报错
配置环境变量：</li>
</ul>
<pre><code>export CRYPTOGRAPHY_DONT_BUILD_RUST=1
export CARGO_HTTP_MULTIPLEXING=false
</code></pre>
<p>如果无法安装某些python模块，则可以尝试用国内源手动安装如</p>
<pre><code>pip install psutil==5.9.1  -i https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre>
<p>如果rust cargo无法访问github，换源后清理<code>rm -rf /root/.cargo/registry/*</code>
换源：vi /root/.cargo/config</p>
<pre><code>[source.crates-io]
registry = "https://github.com/rust-lang/crates.io-index"
# 指定镜像
replace-with = 'tuna' # 如：tuna、sjtu、ustc，或者 rustcc 
# 注：以下源配置一个即可，无需全部 
# 中国科学技术大学
[source.ustc]
registry = "https://mirrors.ustc.edu.cn/crates.io-index"
# 上海交通大学
[source.sjtu]
registry = "https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/" 
# 清华大学
[source.tuna]
registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git" 
# rustcc社区
[source.rustcc]
registry = "https://code.aliyun.com/rustcc/crates.io-index.git"
</code></pre>
<ul>
<li>后台报错：ulimit: open files: cannot modify limit: Operation not...
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/218506433-f62ba5fb-a8d2-4c09-8762-e64a2b7f29fd.png"><img src="https://user-images.githubusercontent.com/5915548/218506433-f62ba5fb-a8d2-4c09-8762-e64a2b7f29fd.png" alt="image" style="max-width: 100%;"></a>
通过grep -rn "ulimit"搜索到使用了ulimit的文件,  删除ulimit部分
vi mdserver-web/class/core/mw.py</li>
</ul>
<pre><code>...
    # cmd = "ulimit -n 10240 &amp;&amp; " + op_dir + \
    #     "/sbin/nginx -t -c " + op_dir + "/conf/nginx.conf"
    cmd = " " + op_dir + \
    "/sbin/nginx -t -c " + op_dir + "/conf/nginx.conf"
...
</code></pre>
<ul>
<li>面板后台点击重启php、nginx等报错提示
system has not been booted with systemd as init system (PID 1). Can't operate. Failed to connect to bus: Host is down
termux中运行的debian不支持systemctl命令导致
参考<a href="https://www.cnblogs.com/sw-code/p/14998645.html" rel="nofollow">用servicectl代替systemctl</a>
</li>
</ul>
<pre><code>root@localhost:/www/server# systemctl restart php7.3
System has not been booted with systemd as init system (PID 1). Can't operate.Failed to connect to bus: Host is down
grep -rn "systemctl" # 可查找文件哪些使用了systemctl

wget https://github.com/smaknsk/servicectl/archive/1.0.tar.gz
tar -xf 1.0.tar.gz -C /usr/local/lib/

root@localhost:which systemctl
/usr/bin/systemctl

cp /usr/bin/systemctl /usr/bin/systemctl_bak
rm -rf /usr/bin/systemctl
ln -s /usr/local/lib/servicectl-1.0/servicectl /usr/bin/systemctl

---
root@localhost:~# cat /usr/lib/systemd/system/openresty.service
[Unit]
Description=OpenResty is a dynamic web platform based on NGINX and LuaJIT.
After=network.target

[Service]
Type=forking
ExecStart=/www/server/openresty/bin/openresty -c /www/server/openresty/nginx/conf/nginx.conf
ExecStop=/www/server/openresty/bin/openresty -s stop
ExecReload=/www/server/openresty/bin/openresty -s reload
KillMode=process
Restart=on-failure

[Install]
----
----
localhost:~# cat /usr/lib/systemd/system/php7.3-fpm.service
[Unit]
Description=The PHP 7.3 FastCGI Process Manager
Documentation=man:php-fpm7.3(8)
After=network.target

[Service]
Type=notify
ExecStart=/usr/sbin/php-fpm7.3 --nodaemonize --fpm-config /etc/php/7.3/fpm/php-fpm.conf
ExecStartPost=-/usr/lib/php/php-fpm-socket-helper install /run/php/php-fpm.sock /etc/php/7.3/fpm/pool.d/www.conf 73
ExecStopPost=-/usr/lib/php/php-fpm-socket-helper remove /run/php/php-fpm.sock /etc/php/7.3/fpm/pool.d/www.conf 73
ExecReload=/bin/kill -USR2 $MAINPID

[Install]
WantedBy=multi-user.target
------
localhost:~# systemctl restart openresty
localhost:~# systemctl restart php7.3-fpm
</code></pre>
<ul>
<li>openresty nginx未启动</li>
</ul>
<pre><code>使用以下命令测试nginx
ps -ef | grep nginx
/www/server/openresty/nginx/sbin/nginx -t
发现使用了80端口，termux需要使用1024以上端口，故修改成1026
vi /www/server/openresty/nginx/conf
80-&gt;1026
继续测试nginx
/www/server/openresty/nginx/sbin/nginx -t
手动启动nginx
/www/server/openresty/nginx/sbin/nginx
验证网页
curl http://127.0.0.1:1026
可以在计划任务增加一个shell命令来启动nginx
</code></pre>
<ul>
<li>php-fpm未启动</li>
</ul>
<pre><code>手动启动报错
root@localhost:/www/server# /etc/init.d/php7.3-fpm start
Failed to validate path /run/php: Bad file descriptor

grep -rn "/run/php" # 查找文件内容/run/php 替换成 /tmp

vi /etc/php/7.3/fpm/pool.d/mw.conf
listen = /run/php/php7.3-fpm.sock =&gt; listen = /tmp/php7.3-fpm.sock
vi /www/server/web_conf/php/conf/enable-php-apt7.3.conf
fastcgi_pass  unix:/ run/php/php7.3-fpm.sock;  =&gt;  fastcgi_pass  unix:/tmp/php7.3-fpm.sock; 
vi /etc/init.d/php7.3-fpm
PIDFILE=${CONF_PIDFILE:-/run/php/php7.3-fpm.pid} =&gt; PIDFILE=${CONF_PIDFILE:-/tmp/php7.3-fpm.pid}

手动重启
root@localhost:/etc# /etc/init.d/php7.3-fpm restart
[ ok ] Restarting PHP 7.3 FastCGI Process Manager: php-fpm7.3.
</code></pre>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/218522603-dba0e559-70f9-4bb7-ab1a-a9551de62f87.png"><img src="https://user-images.githubusercontent.com/5915548/218522603-dba0e559-70f9-4bb7-ab1a-a9551de62f87.png" alt="image" style="max-width: 100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/218486171-2ec972d2-0f97-4115-becb-55b98dfe34ec.png"><img src="https://user-images.githubusercontent.com/5915548/218486171-2ec972d2-0f97-4115-becb-55b98dfe34ec.png" alt="image" style="max-width: 100%;"></a></p>
<h1><a id="user-content-使用sqlite3安装wordpress" class="anchor" aria-hidden="true" tabindex="-1" href="#使用sqlite3安装wordpress"><span aria-hidden="true" class="octicon octicon-link"></span></a>使用sqlite3安装wordpress</h1>
<ol>
<li>在面包后台php设置里安装sqlite3扩展，重启php-fpm</li>
<li>下载wordpress源码上传解压到站点目录下</li>
<li>下载<a href="https://github.com/aaemnnosttv/wp-sqlite-db/blob/master/src/db.php%E6%94%BE%E5%88%B0wp-content%E7%9B%AE%E5%BD%95%E4%B8%8B">https://github.com/aaemnnosttv/wp-sqlite-db/blob/master/src/db.php放到wp-content目录下</a>
</li>
<li>修改wp-config-simple.php为wp-config.php并在头部添加define('USE_MYSQL', false);</li>
<li>访问站点继续正常安装wordpress
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/218750426-5b03fc3f-79e8-4d02-9c8d-e528d2e53ab3.jpg"><img src="https://user-images.githubusercontent.com/5915548/218750426-5b03fc3f-79e8-4d02-9c8d-e528d2e53ab3.jpg" alt="Screenshot_2023-02-14-21-18-46-32_a252b927494330cdc2c8ba3b3f952e5e" style="max-width: 100%;"></a>
</li>
</ol>
]]></description>
                    <pubDate>Tue, 14 Feb 2023 13:19:40 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/27</guid>
                <link>https://github.com/cloudswave/blog/issues/27</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[github下载加速]]></title>
                    <description><![CDATA[<p>下载链接转化：<a href="https://doget.nocsdn.com/#/" rel="nofollow">https://doget.nocsdn.com/#/</a></p>
]]></description>
                    <pubDate>Sun, 12 Feb 2023 06:50:25 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/26</guid>
                <link>https://github.com/cloudswave/blog/issues/26</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[amh面板部署typecho博客后显示404错误]]></title>
                    <description><![CDATA[<p>安装typecho完成后访问后台和文章显示404
修改nginx配置：/home/wwwroot/lnmp01/vhost/typecho.conf</p>
<pre><code>...
location ~ .*\.php(\/.*)*$
	{
		fastcgi_pass  unix:/tmp/php-cgi-lnmp01-typecho.sock;
...
</code></pre>
<p>修改重写规则：/home/wwwroot/lnmp01/rewrite/amh.conf</p>
<pre><code>if (-f $request_filename/index.php){
    rewrite (.*) $1/index.php;
}
if (!-f $request_filename){
    rewrite (.*) /index.php;
}
</code></pre>
<p>重启nginx</p>
<pre><code>killall nginx
/usr/local/nginx-generic-1.20/sbin/nginx
</code></pre>

]]></description>
                    <pubDate>Sat, 11 Feb 2023 09:20:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/25</guid>
                <link>https://github.com/cloudswave/blog/issues/25</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[M301H刷机包]]></title>
                    <description><![CDATA[<p>hi，这是我用百度网盘分享的内容~复制这段内容打开「百度网盘」APP即可获取 
链接:<a href="https://pan.baidu.com/s/1nf0jGQnRutl4-YXA03ts7A?pwd=zn4u%C2%A0" rel="nofollow">https://pan.baidu.com/s/1nf0jGQnRutl4-YXA03ts7A?pwd=zn4u </a>
提取码:zn4u</p>
<p>链接1: <a href="https://pan.baidu.com/s/1qSmtBgSEbKs6ZFm-yCr-XQ" rel="nofollow">https://pan.baidu.com/s/1qSmtBgSEbKs6ZFm-yCr-XQ</a></p>
<p>提取码: nnw3</p>
]]></description>
                    <pubDate>Wed, 08 Feb 2023 14:41:17 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/24</guid>
                <link>https://github.com/cloudswave/blog/issues/24</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[Termux通过Atilo安装Ubuntu并部署宝塔或大圣面板后运行环境不正常的解决记录]]></title>
                    <description><![CDATA[<p>大圣面板（高仿宝塔）：<a href="https://github.com/midoks/mdserver-web">https://github.com/midoks/mdserver-web</a></p>
<ul>
<li>无法安装nginx、php等</li>
</ul>
<ol>
<li>查看任务执行日志，找错误信息</li>
<li>宝塔各环境编译脚本路径：/www/server/panel/install/，大圣面板：/www/server/mdserver-web/plugins/，可以通过修改脚本来尝试手动本地编译</li>
<li>通过日志或者网上搜索手动编译命令</li>
</ol>
<pre><code># 大圣面板php7.4
# 安装所以依赖并编译
cd /www/server/mdserver-web/plugins/php/
/www/server/mdserver-web/plugins/php/versions/74/install.sh install
# 单编php
cd  /www/server/source/php/php74/
 make clean
./configure --prefix=/www/server/php/74 --exec-prefix=/www/server/php/74 --with-config-file-path=/www/server/php/74/etc --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-zlib-dir=/www/server/lib/zlib --with-zip --enable-ftp --enable-mbstring --enable-sockets --enable-simplexml --enable-soap --enable-posix --enable-sysvmsg --enable-sysvsem --enable-sysvshm --disable-intl --disable-fileinfo --without-iconv --with-curl --with-libdir=lib64 --enable-fpm
make &amp;&amp; make install
</code></pre>
<pre><code># 大圣面板php5.6
# 安装所以依赖并编译
cd /www/server/mdserver-web/plugins/php/
/www/server/mdserver-web/plugins/php/versions/56/install.sh install
# 单编php
cd  /www/server/source/php/php56/
./configure -prefix=/www/server/php/56 --exec-prefix=/www/server/php/56 --with-config-file-path=/www/server/php/56/etc --with-zlib-dir=/www/server/lib/zlib --enable-mysqlnd --with-mysql=mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --enable-zip --enable-mbstring --enable-simplexml --enable-ftp --enable-sockets --enable-pcntl --enable-shmop --enable-soap --enable-posix --enable-sysvmsg --enable-sysvsem --enable-sysvshm --disable-intl --disable-fileinfo --without-iconv --with-curl --with-libdir=lib64 --enable-fpm
make &amp;&amp; make install
可能由于手机内存不足，上面编译zend会失败

方案2: 通过ln关联已安装的php环境并配置
ln -s /usr/local/php-generic-7.4 /www/server/php/74
cd /usr/local/php-generic-7.4/etc/
cp php-fpm.conf.default php-fpm.conf
cd php-fpm.d
cp www.conf.default www.conf
vi www.conf # 替换listen = 127.0.0.1:9000 为 listen = /tmp/php-cgi-74.sock

# 增加enable-php-74.conf、fastcgi.conf、pathinfo.conf
vi /www/server/web_conf/php/conf/enable-php-74.conf
location ~ [^/]\.php(/|$)
{
	try_files $uri =404;
	fastcgi_pass  unix:/tmp/php-cgi-74.sock;
	fastcgi_index index.php;
	include /www/server/web_conf/php/conf/fastcgi.conf;
	include /www/server/web_conf/php/conf/pathinfo.conf;
}

vi /www/server/web_conf/php/conf/fastcgi.conf
fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;

fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
fastcgi_param  REQUEST_SCHEME     $scheme;
fastcgi_param  HTTPS              $https if_not_empty;

fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;

# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;


vi /www/server/web_conf/php/conf/pathinfo.conf
set $real_script_name $fastcgi_script_name;
if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") {
        set $real_script_name $1;
        set $path_info $2;
}
fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;
fastcgi_param SCRIPT_NAME $real_script_name;

# 启动nginx php-fpm
/www/server/openresty/nginx/sbin/nginx
php-fpm
</code></pre>
<p>宝塔面板：
手动编译php7.3</p>
<pre><code>bash /www/server/panel/install/php.sh install 7.3
</code></pre>
<p>参考文章手动编译nginx
<a href="https://www.nange.cn/tls13-for-nginx.html" rel="nofollow">宝塔自定义编译安装 Nginx 并配置 TLS1.3</a>
<a href="https://blog.csdn.net/nx_xn/article/details/110120525" rel="nofollow">宝塔Nginx自编译</a>
<a href="https://www.landui.com/help/show-7948.html" rel="nofollow">宝塔环境编译安装第三方PHP扩展示例</a></p>
<pre><code>宝塔手动编译集成nginx1.20记录：
如果存在nginx可以使用/www/server/nginx/sbin/nginx -V查看configure参数，并备份nginx
root@localhost:/www/server/nginx#curl -O http://nginx.org/download/nginx-1.20.0.tar.gz
root@localhost:/www/server/nginx# tar -zxvf nginx-1.20.0.tar.gz
root@localhost:/www/server/nginx#cd nginx-1.20.0/
root@localhost:/www/server/nginx/nginx-1.20.0#./configure --user=www --group=www --prefix=/www/server/nginx
root@localhost:/www/server/nginx/nginx-1.20.0#make &amp;&amp; make install

修改/www/server/nginx/conf/nginx.conf
nginx验证命令
/www/server/nginx/sbin/nginx -t
手动启动nginx
/www/server/nginx/sbin/nginx
</code></pre>
<p>/www/server/nginx/conf/nginx.conf:</p>
<pre><code>
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
  
    server_names_hash_bucket_size 512; # 新增避免nginx名称过长报错
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_body_buffer_size 50m;
    client_max_body_size 50m;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       1025;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
  
  include /www/server/panel/vhost/nginx/*.conf; # 新增使其支持宝塔的多网站

}

</code></pre>
<h1><a id="user-content-问题记录" class="anchor" aria-hidden="true" tabindex="-1" href="#问题记录"><span aria-hidden="true" class="octicon octicon-link"></span></a>问题记录</h1>
<ul>
<li>运行内存不足导致编译失败，cc: fatal error: Killed signal terminated program cc1
网络搜索都说可以增加虚拟内存大小<a href="https://www.cnblogs.com/huojing/articles/15824136.html" rel="nofollow">参考</a>，但是在termux中的ubuntu中以下方法会报错：swapon failed Operation not permitted。</li>
</ul>
<pre><code>#获取要增加的2G的SWAP文件块
dd if=/dev/zero of=/swapfile bs=1k count=2048000
#创建SWAP文件
mkswap /swapfile 
#激活SWAP文件
swapon /swapfile   
#查看SWAP信息是否正确
swapon -s  
#添加到fstab文件中让系统引导时自动启动
</code></pre>
<p>方案2: 尝试清理进程，关闭面板，再手动编译，实验中..</p>
<ul>
<li>大圣面板新建静态站点openresty nginx未启动</li>
</ul>
<pre><code>使用以下命令测试nginx
ps -ef | grep nginx
/www/server/openresty/nginx/sbin/nginx -t
发现使用了80端口，termux需要使用1024以上端口，故修改成1026
vi /www/server/openresty/nginx/conf
80-&gt;1026
继续测试nginx
/www/server/openresty/nginx/sbin/nginx -t
手动启动nginx
/www/server/openresty/nginx/sbin/nginx
验证网页
curl http://127.0.0.1:1026
</code></pre>
<p>测试发现：宝塔的nginx同样无法启动，也需要如此验证，nginx路径：/www/server/nginx/</p>
<ul>
<li>宝塔报错：ulimit: open files: cannot modify limit: Operation not permitted
寻找并修改源码</li>
</ul>
<pre><code>root@localhost:/www/server# grep -rn "ulimit"
Binary file panel/data/default.db matches
panel/class/public.py:299:        result = ExecShell("ulimit -n 10240 &amp;&amp; /www/server/nginx/sbin/nginx -t -c /www/server/nginx/conf/nginx.conf");
panel/class/public.py:302:        result = ExecShell("ulimit -n 10240 &amp;&amp; /www/server/apache/bin/apachectl -t");
panel/class/system.py:533:            result = public.ExecShell('ulimit -n 10240 &amp;&amp; ' + self.setupPath+'/apache/bin/apachectl -t');
panel/class/system.py:551:            result = public.ExecShell('ulimit -n 10240 &amp;&amp; nginx -t -c '+self.setupPath+'/nginx/conf/nginx.conf');
Binary file panel/class/public.pyc matches
Binary file panel/class/system.pyc matches
root@localhost:/www/server#
</code></pre>
<p>修改panel/class/public.py和panel/class/system.py将ulimit -n 10240删除:</p>
<pre><code>    if get_webserver() == 'nginx':
        result = ExecShell("/www/server/nginx/sbin/nginx -t -c /www/server/nginx/conf/nginx.conf");
        searchStr = 'successful'
    else:
        result = ExecShell("/www/server/apache/bin/apachectl -t");
</code></pre>
<p>重启宝塔：/etc/init.d/bt restart</p>
]]></description>
                    <pubDate>Sat, 04 Feb 2023 12:10:16 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/22</guid>
                <link>https://github.com/cloudswave/blog/issues/22</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[通过nps对宝塔部署的网站进行内网穿透访问]]></title>
                    <description><![CDATA[<ul>
<li>宝塔新建网站时应该如下增加端口配置：</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/215266767-beeee4ef-899a-4eeb-b959-1125f3b78605.png"><img width="646" alt="image" src="https://user-images.githubusercontent.com/5915548/215266767-beeee4ef-899a-4eeb-b959-1125f3b78605.png" style="max-width: 100%;"></a></p>
<ul>
<li>在nps后台中增加域名绑定是端口填写上一步分配的端口</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/215266909-13785cc8-9fb8-4dcd-b24e-1eb36d9094ef.png"><img width="665" alt="image" src="https://user-images.githubusercontent.com/5915548/215266909-13785cc8-9fb8-4dcd-b24e-1eb36d9094ef.png" style="max-width: 100%;"></a></p>
]]></description>
                    <pubDate>Sat, 28 Jan 2023 12:41:14 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/23</guid>
                <link>https://github.com/cloudswave/blog/issues/23</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[Termux通过Ubuntu安装AMH面板]]></title>
                    <description><![CDATA[<p><strong>注意先使用：uname -m查看确保手机是aarch64位架构</strong></p>
<h1><a id="user-content-termux下atilo安装ubuntu" class="anchor" aria-hidden="true" tabindex="-1" href="#termux下atilo安装ubuntu"><span aria-hidden="true" class="octicon octicon-link"></span></a>Termux下Atilo安装ubuntu</h1>
<p>参考：<a href="https://www.jianshu.com/p/a9b30ea2ae66" rel="nofollow">https://www.jianshu.com/p/a9b30ea2ae66</a></p>
<h1><a id="user-content-快速安装amh面板" class="anchor" aria-hidden="true" tabindex="-1" href="#快速安装amh面板"><span aria-hidden="true" class="octicon octicon-link"></span></a>快速安装amh面板</h1>
<p>参考：<a href="http://amh.sh/install.htm" rel="nofollow">http://amh.sh/install.htm</a>
ubuntu下：</p>
<pre><code>export CV=[CN] DV=N &amp;&amp; wget http://dl.amh.sh/amh.sh &amp;&amp; bash amh.sh
</code></pre>
<p>安装成功后系统会提示面板访问地址与AMH、MySQL默认账号密码。
常用配置目录：</p>
<pre><code>/usr/local/amh-7.0/etc/
/usr/local/amh-7.0/vhost/
/home/wwwroot/lnmp01/vhost/
</code></pre>
<p>常用命令：</p>
<pre><code>启动Nginx: amh nginx start
停止Nginx: amh nginx stop
重载Nginx: amh nginx reload
重启Nginx: amh nginx restart
启动MySQL: amh mysql start
停止MySQL: amh mysql stop
重载MySQL: amh mysql reload
重启MySQL: amh mysql restart
强制重载MySQL: amh mysql force-reload
启动PHP: amh php start [主标识域名]
停止PHP: amh php stop [主标识域名]
强行停止PHP: amh php force-quit [主标识域名]
重启PHP: amh php restart [主标识域名]
重载PHP: amh php reload [主标识域名]
</code></pre>
<h1><a id="user-content-错误处理记录" class="anchor" aria-hidden="true" tabindex="-1" href="#错误处理记录"><span aria-hidden="true" class="octicon octicon-link"></span></a>错误处理记录</h1>
<ul>
<li>面板8888端口无法访问主页，amh nginx restart 看报错信息，发现ssl证书无法加载，80端口无法使用</li>
</ul>
<pre><code>nginx: [emerg] cannot load certificate "/usr/local/amh-7.0/etc/ssl/amh.crt": BIO_new_file() failed (SSL: error:02001002:system library:fopen:No such file or directory:fopen('/usr/local/amh-7.0/etc/ssl/amh.crt','r') error:2006D080:BIO routines:BIO_new_file:no such file)

nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied)
</code></pre>
<ol>
<li>修改/usr/local/amh-7.0/vhost/amh-nginx.conf移除9999端口服务器配置部分</li>
<li>修改/home/wwwroot/lnmp01/vhost/0.0.0.0.conf，将80端口改成1024以上比如1025</li>
</ol>

]]></description>
                    <pubDate>Wed, 25 Jan 2023 03:59:23 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/21</guid>
                <link>https://github.com/cloudswave/blog/issues/21</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[安卓5下Termux通过ubuntu安装alist]]></title>
                    <description><![CDATA[<p>安卓7以上可以直接通过pkg install alist来安装alist，安卓5安装ubuntu需要64位termux，通过Atilo套娃其他linux来安装alist</p>
<h2><a id="user-content-安装" class="anchor" aria-hidden="true" tabindex="-1" href="#安装"><span aria-hidden="true" class="octicon octicon-link"></span></a>安装</h2>
<p>termux下：</p>
<pre><code>apt install tmux
echo "deb [trusted=yes arch=all] https://yadominjinta.github.io/files/ termux extras" &gt;&gt; $PREFIX/etc/apt/sources.list.d/atilo.list
apt update &amp;&amp; apt install atilo-cn
atilo images #可以安装的镜像列表
atilo pull ubuntu
ls ~/.atilo #可以备份该路径以便日后有问题恢复系统
atilo run ubuntu #启动进入ubuntu
</code></pre>
<p>ubuntu下：</p>
<pre><code>apt install curl
apt install tmux
curl -fsSL "https://alist.nn.ci/v3.sh" | bash -s install
/opt/alist/alist admin #查看密码
/opt/alist/alist server
</code></pre>
<p>Atilo介绍：</p>
<pre><code>Atilo 是一个用来帮助你在termux上安装不同的GNU/Linux发行版的程序
命令:
images 列出可用镜像
remove 移除本地的镜像
pull 拉取远程的镜像
run 运行镜像
clean 清除缓存
help 帮助

$ atilo images
+----------+------------+--------+--------+
| 名称 | 版本 | 已安装 | 可安装 |
+----------+------------+--------+--------+
| alpine | 3.12 | False | True |
| centos | 8 | False | True |
| debian | buster | False | True |
| fedora | 33 | False | True |
| kali | latest | False | True |
| opensuse | Tumbleweed | False | True |
| ubuntu | focal | False | True |
+----------+------------+--------+--------+
</code></pre>
<h2><a id="user-content-自启配置" class="anchor" aria-hidden="true" tabindex="-1" href="#自启配置"><span aria-hidden="true" class="octicon octicon-link"></span></a>自启配置</h2>
<p>termux下：</p>
<pre><code>echo "~/startup.sh" &gt;&gt; ~/.bashrc
echo "~/startup.sh" &gt;&gt; ~/.atilo/ubuntu/root/.bashrc
</code></pre>
<p>vi ~/startup.sh增加：</p>
<pre><code>if pgrep -f "ubuntu" &gt;/dev/null
  then
    echo "ubuntu运行中..."
  else
  tmux new -d -s ubuntu 'atilo run ubuntu'
  echo "ubuntu已开启..."
fi
</code></pre>
<p>vi ~/.atilo/ubuntu/root/startup.sh：</p>
<pre><code>if pgrep -x "alist" &gt;/dev/null
  then
    echo "alist运行中..."
  else
  tmux new -d -s alist '/opt/alist/alist server'
  echo "alist已开启..."
fi
</code></pre>

]]></description>
                    <pubDate>Mon, 23 Jan 2023 15:13:36 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/19</guid>
                <link>https://github.com/cloudswave/blog/issues/19</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[联想乐檬k3刷安卓5.1教程]]></title>
                    <description><![CDATA[<h2><a id="user-content-操作快捷键" class="anchor" aria-hidden="true" tabindex="-1" href="#操作快捷键"><span aria-hidden="true" class="octicon octicon-link"></span></a>操作快捷键</h2>
<ul>
<li>三键进recovery: 电源键+音量加+音量减</li>
<li>进入fastboot: 电源键+音量减</li>
<li>官方更多选择菜单：电源键+音量减</li>
<li>高通刷机：按住音量加+音量减然后插电脑usb，设备管理器会显示高通端口</li>
</ul>
<p>刷机包下载: <a href="https://pan.baidu.com/s/1tnf2xMoqtcL6p50ZiRYICw" rel="nofollow">https://pan.baidu.com/s/1tnf2xMoqtcL6p50ZiRYICw</a> 提取码:agjm
提示： 如果插电脑usb后供电不足反复重启，则电池触点正负极接线后使用充电宝供电</p>
<h2><a id="user-content-线刷51底包" class="anchor" aria-hidden="true" tabindex="-1" href="#线刷51底包"><span aria-hidden="true" class="octicon octicon-link"></span></a>线刷5.1底包</h2>
<p><code>联想乐檬K3安卓5.0以上底层线刷包.rar</code>中有线刷文件，驱动和工具
线刷工具使用参考：<a href="http://m.rom.7to.cn/jiaochengdetail/4292" rel="nofollow">http://m.rom.7to.cn/jiaochengdetail/4292</a></p>
<ol>
<li>
<p>先将官方刷机包解压到电脑上，然后再将刷机工具也解压，然后进入工具目录，找到并双击运行升级工具“QcomDLoader.exe”,</p>
</li>
<li>
<p>点击工具左侧的第一个按钮，也就是port上面那个齿轮按钮，点击后如下所示找到解压好的固件文件夹。
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976396-073045d4-2282-419a-8ad7-b72475747578.png"><img src="https://user-images.githubusercontent.com/5915548/213976396-073045d4-2282-419a-8ad7-b72475747578.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p>再点击工具左侧第二个按钮，也就是两个齿轮的按钮，弹出配置框，会看到框里有三个文件都在我们刚刚加载好的文件包中，这里默认不需要修改。所以点击OK即可：
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976398-ace4bc2a-c929-4676-b433-2d1d1ea9f49e.png"><img src="https://user-images.githubusercontent.com/5915548/213976398-ace4bc2a-c929-4676-b433-2d1d1ea9f49e.png" alt="image" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976397-6ed86dbb-3870-4bfd-8a12-b711bc9ee17d.png"><img src="https://user-images.githubusercontent.com/5915548/213976397-6ed86dbb-3870-4bfd-8a12-b711bc9ee17d.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p>点击左边第三个按钮，也就是一个箭头的按钮，点击之后，将手机关机，同时按住音量上键和下键不放，连接上电脑。走动进度条后松开两键，如下图
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976409-231b3823-23f6-4636-90d3-d7f002f2aa1f.png"><img src="https://user-images.githubusercontent.com/5915548/213976409-231b3823-23f6-4636-90d3-d7f002f2aa1f.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p>线刷升级过程中请不要触碰手机和数据线，升级时间一般为5分钟左右，请根据实际情况而定，线刷成功后如下图所示：再拔掉数据线，重装电池开机即可!
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976439-1e958b44-1676-471b-b660-a00f8246a871.png"><img src="https://user-images.githubusercontent.com/5915548/213976439-1e958b44-1676-471b-b660-a00f8246a871.png" alt="image" style="max-width: 100%;"></a></p>
</li>
</ol>
<h2><a id="user-content-卡刷魔趣51-64位系统" class="anchor" aria-hidden="true" tabindex="-1" href="#卡刷魔趣51-64位系统"><span aria-hidden="true" class="octicon octicon-link"></span></a>卡刷魔趣5.1-64位系统</h2>
<ol>
<li>线刷后，三键会进入到自带的奇兔recovery，双清格式化data分区</li>
<li>连接电脑后可以看到k30设备，将卡刷包<code>乐檬k3-卡刷魔趣android-5.1刷机包.zip</code>复制到设备中</li>
<li>recovery点击安装刚复制的卡刷包</li>
<li>显示完毕后重启手机</li>
</ol>
<h2><a id="user-content-scrcpy远程控制手机" class="anchor" aria-hidden="true" tabindex="-1" href="#scrcpy远程控制手机"><span aria-hidden="true" class="octicon octicon-link"></span></a>scrcpy远程控制手机</h2>
<p>参考：<a href="https://blog.csdn.net/liuqinhou/article/details/127460195" rel="nofollow">https://blog.csdn.net/liuqinhou/article/details/127460195</a></p>
<pre><code>adb connect 192.168.153.243 # 手机ip
scrcpy -b5M -m720 -Sw
</code></pre>
<table>
<thead>
<tr>
<th>Action</th>
<th>快捷键</th>
<th>快捷键 (macOS)</th>
</tr>
</thead>
<tbody>
<tr>
<td>切换全屏模式</td>
<td>Ctrl+f</td>
<td>Cmd+f</td>
</tr>
<tr>
<td>向左旋转屏幕</td>
<td>Ctrl+← (left)</td>
<td>Cmd+← (left)</td>
</tr>
<tr>
<td>向右旋转屏幕</td>
<td>Ctrl+→ (right)</td>
<td>Cmd+→ (right)</td>
</tr>
<tr>
<td>将窗口大小调整为1:1</td>
<td>Ctrl+g</td>
<td>Cmd+g</td>
</tr>
<tr>
<td>调整窗口大小以移除黑色边框</td>
<td>Ctrl+x | Double-click¹</td>
<td>Cmd+x | Double-click¹</td>
</tr>
<tr>
<td>点击 HOME</td>
<td>Ctrl+h | Middle-click</td>
<td>Ctrl+h | Middle-click</td>
</tr>
<tr>
<td>点击 BACK</td>
<td>Ctrl+b | Right-click²</td>
<td>Cmd+b | Right-click²</td>
</tr>
<tr>
<td>点击 APP_SWITCH</td>
<td>Ctrl+s</td>
<td>Cmd+s</td>
</tr>
<tr>
<td>点击 MENU</td>
<td>Ctrl+m</td>
<td>Ctrl+m</td>
</tr>
<tr>
<td>点击 VOLUME_UP</td>
<td>Ctrl+↑ (up)</td>
<td>Cmd+↑ (up)</td>
</tr>
<tr>
<td>点击 VOLUME_DOWN</td>
<td>Ctrl+↓ (down)</td>
<td>Cmd+↓ (down)</td>
</tr>
<tr>
<td>点击 POWER</td>
<td>Ctrl+p</td>
<td>Cmd+p</td>
</tr>
<tr>
<td>开机</td>
<td>Right-click²</td>
<td>Right-click²</td>
</tr>
<tr>
<td>关闭设备屏幕</td>
<td>Ctrl+o</td>
<td>Cmd+o</td>
</tr>
<tr>
<td>点亮设备屏幕</td>
<td>Ctrl+Shift+o</td>
<td>Cmd+Shift+o</td>
</tr>
<tr>
<td>旋转设备屏幕</td>
<td>Ctrl+r</td>
<td>Cmd+r</td>
</tr>
<tr>
<td>展开通知面板</td>
<td>Ctrl+n</td>
<td>Cmd+n</td>
</tr>
<tr>
<td>折叠通知面板</td>
<td>Ctrl+Shift+n</td>
<td>Cmd+Shift+n</td>
</tr>
<tr>
<td>将设备剪贴板复制到计算机</td>
<td>Ctrl+c</td>
<td>Cmd+c</td>
</tr>
<tr>
<td>将电脑剪贴板粘贴到设备上</td>
<td>Ctrl+v</td>
<td>Cmd+v</td>
</tr>
<tr>
<td>将计算机剪贴板复制到设备并粘贴</td>
<td>Ctrl+Shift+v</td>
<td>Cmd+Shift+v</td>
</tr>
<tr>
<td>启用/禁用帧率显示</td>
<td>Ctrl+i</td>
<td>Cmd+i</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-安卓5安装termux" class="anchor" aria-hidden="true" tabindex="-1" href="#安卓5安装termux"><span aria-hidden="true" class="octicon octicon-link"></span></a>安卓5安装termux</h2>
<ul>
<li>参考<a href="https://github.com/termux/termux-app/wiki/Termux-on-android-5-or-6">Termux-on-android-5-or-6</a>
</li>
<li>最新版本<a href="https://github.com/termux/termux-app/actions/workflows/debug_build.yml?query=branch%3Amaster+">下载地址</a>
</li>
<li><a href="https://wwuy.lanzoub.com/imQ8T0i4bd7e" rel="nofollow">64位termux-app_v0.118.0+be66cff-apt-android-5-github-debug_arm64-v8a.zip - 蓝奏云</a></li>
<li><a href="https://wwuy.lanzoub.com/iq8cr0i4bdjg" rel="nofollow">32位termux-app_v0.118.0+be66cff-apt-android-5-github-debug_armeabi-v7a.zip - 蓝奏云</a></li>
</ul>
<h2><a id="user-content-利用atilo安装ubuntu或debian和alist" class="anchor" aria-hidden="true" tabindex="-1" href="#利用atilo安装ubuntu或debian和alist"><span aria-hidden="true" class="octicon octicon-link"></span></a>利用Atilo安装ubuntu或debian和alist</h2>
<p>提示：安装ubuntu需要64位termux，安卓5的termux无法直接通过pkg install alist来安装alist，故需要通过其他linux安装</p>
<pre><code>echo "deb [trusted=yes arch=all] https://yadominjinta.github.io/files/ termux extras" &gt;&gt; $PREFIX/etc/apt/sources.list.d/atilo.list
apt update &amp;&amp; apt install atilo-cn
atilo images #可以安装的镜像列表
atilo pull ubuntu
ls ~/.atilo #可以备份该路径以便日后有问题恢复系统
atilo run ubuntu
# 以下为ubuntu下命令
apt install curl
curl -fsSL "https://alist.nn.ci/v3.sh" | bash -s install
/opt/alist/alist admin
/opt/alist/alist server
</code></pre>
<p>Atilo 是一个用来帮助你在termux上安装不同的GNU/Linux发行版的程序</p>
<pre><code>命令:
images           列出可用镜像
remove           移除本地的镜像
pull             拉取远程的镜像
run              运行镜像
clean            清除缓存
help             帮助
$ atilo images
+----------+------------+--------+--------+
|   名称   |    版本    | 已安装 | 可安装 |
+----------+------------+--------+--------+
|  alpine  |    3.12    | False  |  True  |
|  centos  |     8      | False  |  True  |
|  debian  |   buster   | False  |  True  |
|  fedora  |     33     | False  |  True  |
|   kali   |   latest   | False  |  True  |
| opensuse | Tumbleweed | False  |  True  |
|  ubuntu  |   focal    | False  |  True  |
+----------+------------+--------+--------+
</code></pre>

]]></description>
                    <pubDate>Mon, 23 Jan 2023 14:10:27 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/18</guid>
                <link>https://github.com/cloudswave/blog/issues/18</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[termux nginx配置多网站示例]]></title>
                    <description><![CDATA[<pre><code># pwd
/data/data/com.termux/files/usr/etc/nginx
# vi nginx.conf 
</code></pre>
<p>修改nginx配置文件示例如下，配置了8080和8081两个端口：</p>
<pre><code>#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /data/data/com.termux/files/home/www;
            index  index.php index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/data/com.termux/files/home/www;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        # location ~ \.php$ {
        location ~ .*.php(/.*)*$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /data/data/com.termux/files/home/www$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    server {
        listen       8081;
        server_name  localhost;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /data/data/com.termux/files/home/music;
            index  index.php index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/data/com.termux/files/home/www;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /data/data/com.termux/files/home/music$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
</code></pre>
]]></description>
                    <pubDate>Sun, 25 Dec 2022 09:51:10 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/17</guid>
                <link>https://github.com/cloudswave/blog/issues/17</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[挂载alist webdav]]></title>
                    <description><![CDATA[<p>mount -t davfs <a href="http://141.147.162.129:5244/dav" rel="nofollow">http://141.147.162.129:5244/dav</a>  ~/alist</p>
]]></description>
                    <pubDate>Fri, 16 Dec 2022 13:14:07 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/10</guid>
                <link>https://github.com/cloudswave/blog/issues/10</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[fiddler抓包edge要设置使用系统代理]]></title>
                    <description><![CDATA[<p>fiddler抓包edge要设置使用系统代理</p>
]]></description>
                    <pubDate>Thu, 15 Dec 2022 01:40:24 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/16</guid>
                <link>https://github.com/cloudswave/blog/issues/16</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[nginx和php-fpm以root用户运行]]></title>
                    <description><![CDATA[<p><strong>开启root权限，请谨慎使用！！！</strong>
为了使KodExplorer能读写root用户数据需要修改nginx，php-fpm运行用户为root，下面为修改笔记</p>
<ul>
<li>nginx version: nginx/1.18.0 (Ubuntu)</li>
<li>PHP 8.1</li>
</ul>
<p>sudo vi /etc/nginx/nginx.conf</p>
<pre><code>user root; #第一行
...
</code></pre>
<p>sudo vi /etc/php/8.1/fpm/pool.d/<a href="http://www.conf" rel="nofollow">www.conf</a></p>
<pre><code>...
# 修改两处
listen.owner = root
listen.group = root
...
user = root
group = root
</code></pre>
<p>sudo vi /lib/systemd/system/php8.1-fpm.service</p>
<pre><code># 加上-R允许root执行
...
ExecStart=/usr/sbin/php-fpm8.1 -R --nodaemonize --fpm-config /etc/php/8.1/fpm/php-fpm.conf
...
</code></pre>
<p>防火墙问题可能导致80端口无法访问</p>
<pre><code># 如果外网无法访问请关闭防火墙或者添加规则
service iptables stop 
iptables -I INPUT -p tcp --dport 80 -j ACCEPT
</code></pre>
<p>重启服务</p>
<pre><code>systemctl daemon-reload # php8.1-fpm.service修改刷新
/etc/init.d/php8.1-fpm restart
/etc/init.d/nginx restart

# check php8.1-fpm.sock是否生成
ls /run/php/
</code></pre>

]]></description>
                    <pubDate>Sun, 11 Dec 2022 12:54:25 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/15</guid>
                <link>https://github.com/cloudswave/blog/issues/15</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[docker kodexplorer]]></title>
                    <description><![CDATA[<pre><code> docker run -d \
--name kode \
-e PUID=$UID \
-e PGID=$GID \
-p 80:80 \
-v /root/kode:/var/www/html \
-v /root:/father \
kodcloud/kodexplorer
</code></pre>
]]></description>
                    <pubDate>Sat, 10 Dec 2022 18:23:43 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/14</guid>
                <link>https://github.com/cloudswave/blog/issues/14</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[给rm增加回收站，安全的使用rm命令]]></title>
                    <description><![CDATA[<pre><code>#!/usr/bin/env bash
#
# Description: 给rm命令增加回收站
# System Required: CentOS/Debian/Ubuntu
# Version: 1.0.0

cat &gt; /usr/local/bin/rm.sh &lt;&lt; 'EOF'
#!/bin/bash 

RECYCLE=~/.local/share/Trash/files
test ! -d ${RECYCLE} &amp;&amp; mkdir -p ${RECYCLE} #if not trash folder,create one  
_datedir=`date +"%Y%m%d"`  
_dstdir=${RECYCLE}/${_datedir}  
test ! -d ${_dstdir} &amp;&amp; mkdir -p ${_dstdir} #if not trash folder,create one  

for _parms in $*  
do  
if [ -d ${_parms} ] || [ -f ${_parms} ];then  
  test -d ${_parms} &amp;&amp; echo "${_parms} is directory" &amp;&amp; mv ${_parms} ${_dstdir}/  
  test -f ${_parms} &amp;&amp; echo "${_parms} is file" &amp;&amp; mv ${_parms} ${_dstdir}/  
  else   echo "${_parms} is not directory or file"  
fi  
done
EOF

chmod +x /usr/local/bin/rm.sh
echo "alias rm='/usr/local/bin/rm.sh'" &gt;&gt; ~/.bashrc
echo "alias surm='/bin/rm -i'" &gt;&gt; ~/.bashrc
echo "alias rmt='/bin/rm -i -r ~/.local/share/Trash/files/*'" &gt;&gt; ~/.bashrc # 一键清理回收站命令: rmt -f

source ~/.bashrc
</code></pre>

]]></description>
                    <pubDate>Sat, 10 Dec 2022 14:50:48 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/13</guid>
                <link>https://github.com/cloudswave/blog/issues/13</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[finalshell配置备份同步]]></title>
                    <description><![CDATA[<p>备份同步以下文件：</p>
<pre><code>/Users/$USER/Library/FinalShell/conn/
/Users/$USER/Library/FinalShell/config.json
/Users/$USER/Library/FinalShell/knownhosts.json
/Users/$USER/Library/FinalShell/config.json
</code></pre>
<p>/conn #服务器连接信息配置文件夹
config.json #基本配置文件
knownhosts.json #服务器密钥
tconfig.json #一些缓存</p>

]]></description>
                    <pubDate>Tue, 06 Dec 2022 05:00:31 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/11</guid>
                <link>https://github.com/cloudswave/blog/issues/11</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[禁用win10自动更新]]></title>
                    <description><![CDATA[<p>管理员运行cmd：</p>
<pre><code>takeown /F C:\Windows\SoftwareDistribution /A /R
Icacls C:\Windows\SoftwareDistribution /deny system:(OI)(CI)(W)
Icacls C:\Windows\SoftwareDistribution /deny "ALL APPLICATION PACKAGES:(OI)(CI)(W)"
</code></pre>

]]></description>
                    <pubDate>Sat, 12 Nov 2022 09:08:16 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/9</guid>
                <link>https://github.com/cloudswave/blog/issues/9</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[测试issue2blog]]></title>
                    <description><![CDATA[<h2><a id="user-content-标题" class="anchor" aria-hidden="true" tabindex="-1" href="#标题"><span aria-hidden="true" class="octicon octicon-link"></span></a>标题</h2>
<p>一级标题:    # 标题<br>
二级标题:   ## 标题<br>
三级标题:     ### 标题<br>
四级标题:    #### 标题<br>
五级标题:     #### 标题</p>
<h2><a id="user-content-加粗" class="anchor" aria-hidden="true" tabindex="-1" href="#加粗"><span aria-hidden="true" class="octicon octicon-link"></span></a>加粗</h2>
<p><strong>加粗</strong></p>

<h2><a id="user-content-图片" class="anchor" aria-hidden="true" tabindex="-1" href="#图片"><span aria-hidden="true" class="octicon octicon-link"></span></a>图片</h2>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5ddad46642a2c8b0ac8a83c25b204e21c16d8523bb5d51c23084866c9e32aee8/68747470733a2f2f7777772e696d6775726c2e6f72672f7374617469632f696d616765732f6c756f79652e6a7067"><img src="https://camo.githubusercontent.com/5ddad46642a2c8b0ac8a83c25b204e21c16d8523bb5d51c23084866c9e32aee8/68747470733a2f2f7777772e696d6775726c2e6f72672f7374617469632f696d616765732f6c756f79652e6a7067" alt="落叶" data-canonical-src="https://www.imgurl.org/static/images/luoye.jpg" style="max-width: 100%;"></a></p>
<h2><a id="user-content-超链接" class="anchor" aria-hidden="true" tabindex="-1" href="#超链接"><span aria-hidden="true" class="octicon octicon-link"></span></a>超链接</h2>
<p><a href="http://baidu.com" rel="nofollow">百度</a></p>
<h2><a id="user-content-斜体" class="anchor" aria-hidden="true" tabindex="-1" href="#斜体"><span aria-hidden="true" class="octicon octicon-link"></span></a>斜体</h2>
<p><em>斜体</em></p>
<h2><a id="user-content-粗斜体" class="anchor" aria-hidden="true" tabindex="-1" href="#粗斜体"><span aria-hidden="true" class="octicon octicon-link"></span></a>粗斜体</h2>
<p><em><strong>粗斜体</strong></em></p>
<h2><a id="user-content-代码块" class="anchor" aria-hidden="true" tabindex="-1" href="#代码块"><span aria-hidden="true" class="octicon octicon-link"></span></a>代码块</h2>
<pre><code>code.
</code></pre>
<h2><a id="user-content-分割线" class="anchor" aria-hidden="true" tabindex="-1" href="#分割线"><span aria-hidden="true" class="octicon octicon-link"></span></a>分割线</h2>
<p>Hello</p>

]]></description>
                    <pubDate>Sun, 30 Oct 2022 09:30:51 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/1</guid>
                <link>https://github.com/cloudswave/blog/issues/1</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>测试</category>
            </item>
            <item>
                <title><![CDATA[Github issue update Api]]></title>
                    <description><![CDATA[<p>Github issue update js api:</p>
<pre><code>// Octokit.js
// https://github.com/octokit/core.js#readme
const octokit = new Octokit({
  auth: 'YOUR-TOKEN'
})

await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
  owner: 'OWNER',
  repo: 'REPO',
  issue_number: 'ISSUE_NUMBER',
  title: 'Found a bug',
  body: 'I\'m having a problem with this.',
  assignees: [
    'octocat'
  ],
  milestone: 1,
  state: 'open',
  labels: [
    'bug'
  ]
})
</code></pre>
<p><a href="https://docs.github.com/cn/rest/issues/issues#update-an-issue">https://docs.github.com/cn/rest/issues/issues#update-an-issue</a></p>

]]></description>
                    <pubDate>Sun, 30 Oct 2022 09:17:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/8</guid>
                <link>https://github.com/cloudswave/blog/issues/8</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[开始使用Github Issues写博客]]></title>
                    <description><![CDATA[<h2><a id="user-content-背景" class="anchor" aria-hidden="true" tabindex="-1" href="#背景"><span aria-hidden="true" class="octicon octicon-link"></span></a>背景</h2>
<ul>
<li>简书频繁下架文章，每天只能发布两篇</li>
<li>CSDN页面太杂，写作不够专注，客户端不好用</li>
<li>Github Web版和App都非常简洁实用，可以随意写文章不需要担心审核问题</li>
<li>可以通过Actions工作流来同步文章到Github Pages和其他博客平台</li>
<li>学习Github Action开发，学习机遇Github到自动化构建部署流程</li>
</ul>


<h2><a id="user-content-需求和实现" class="anchor" aria-hidden="true" tabindex="-1" href="#需求和实现"><span aria-hidden="true" class="octicon octicon-link"></span></a>需求和实现</h2>
<h3><a id="user-content-自动生成readme目录" class="anchor" aria-hidden="true" tabindex="-1" href="#自动生成readme目录"><span aria-hidden="true" class="octicon octicon-link"></span></a>自动生成README目录</h3>
<p>仿照<a href="https://github.com/cloudswave/blog/blob/master/.github/workflows/issue2readme.yaml">.github/workflows/issue2readme.yaml</a>在仓库里增加workflows配置文件进行修改，<a href="https://github.com/bxb100/issueblog#readme">说明文档</a>，最后生成<a href="https://github.com/cloudswave/blog/#readme">效果</a></p>
<h3><a id="user-content-自动构建hexo发布到github-pages" class="anchor" aria-hidden="true" tabindex="-1" href="#自动构建hexo发布到github-pages"><span aria-hidden="true" class="octicon octicon-link"></span></a>自动构建Hexo发布到Github Pages</h3>
<p>仿照<a href="https://github.com/cloudswave/blog/blob/master/.github/workflows/issue2hexo.yaml">.github/workflows/issue2hexo.yaml</a>在仓库里增加workflows配置文件，根据自身情况修改环境变量，最后发布的效果可查看<a href="http://cloudswave.github.io" rel="nofollow">我的Hexo博客</a></p>
<pre><code>env:
  # github pages repo
  PUBLISH_REPOSITORY: cloudswave/cloudswave.github.io
  # GITHUB TOKEN 可以试一试将secrets.BLOG_TOKEN可以直接改成github内置的密钥secrets.BLOG_TOKEN，但是我的会报如下图的权限错误
  GITHUB_TOKEN: ${{ secrets.BLOG_TOKEN }}
</code></pre>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198711776-db2ff7fc-f7ec-4eec-b67f-8a1d162a1964.png"><img src="https://user-images.githubusercontent.com/5915548/198711776-db2ff7fc-f7ec-4eec-b67f-8a1d162a1964.png" alt="image" style="max-width: 100%;"></a></p>
<p>BLOG_TOKEN生成指导：</p>
<ol>
<li>
<p><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-personal-access-token-classic">creating-a-personal-access-token-classic</a>不知道选那些权限选择的时候全部选上吧
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198711260-eb252739-105f-472b-8894-a016fc1d28ad.png"><img src="https://user-images.githubusercontent.com/5915548/198711260-eb252739-105f-472b-8894-a016fc1d28ad.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p><a href="https://docs.github.com/cn/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">creating-encrypted-secrets-for-a-repository</a></p>
</li>
</ol>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198710315-f180cdb0-baa8-4c16-aa92-fed599bd354f.png"><img src="https://user-images.githubusercontent.com/5915548/198710315-f180cdb0-baa8-4c16-aa92-fed599bd354f.png" alt="image" style="max-width: 100%;"></a>
<strong>另外还需要Pages仓库的权限配置</strong>，如下图：
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198712542-b1c8edfc-4170-426b-885c-0ba691a6934b.png"><img src="https://user-images.githubusercontent.com/5915548/198712542-b1c8edfc-4170-426b-885c-0ba691a6934b.png" alt="image" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198712367-39502701-4d41-4468-97b7-9b808b92ae62.png"><img src="https://user-images.githubusercontent.com/5915548/198712367-39502701-4d41-4468-97b7-9b808b92ae62.png" alt="image" style="max-width: 100%;"></a></p>
<h3><a id="user-content-自动发布文章到其他博客平台用来引流" class="anchor" aria-hidden="true" tabindex="-1" href="#自动发布文章到其他博客平台用来引流"><span aria-hidden="true" class="octicon octicon-link"></span></a>自动发布文章到其他博客平台用来引流</h3>
<ul>
<li>发布到CSDN, 参考<a href="https://github.com/cloudswave/blog/blob/master/.github/workflows/issue2csdn.yml">issue2csdn</a>增加workflows配置文件，<a href="https://github.com/cloudswave/issue2csdn#readme">说明文档</a>
</li>
</ul>
<h3><a id="user-content-提示" class="anchor" aria-hidden="true" tabindex="-1" href="#提示"><span aria-hidden="true" class="octicon octicon-link"></span></a>提示</h3>
<p>如果你只想在issue添加Miestone为publish的时候才发布更新，可以修改yml里的触发器，如：</p>
<pre><code>on:
  issues:
    # Sufficient to trigger this workflow when an issue is milestoned
    types: [milestoned]
    # types: [unlabeled, labeled, edited, milestoned]
</code></pre>
<p>可以在Actions页面查看workflow执行日志和禁止某个workflow执行
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198864861-03313485-2a81-4f76-ba44-ec24254a619a.png"><img width="805" alt="action-guide" src="https://user-images.githubusercontent.com/5915548/198864861-03313485-2a81-4f76-ba44-ec24254a619a.png" style="max-width: 100%;"></a></p>
<h2><a id="user-content-参考文档" class="anchor" aria-hidden="true" tabindex="-1" href="#参考文档"><span aria-hidden="true" class="octicon octicon-link"></span></a>参考文档</h2>
<ul>
<li><a href="https://github.com/Solybum/hexo-deploy">https://github.com/Solybum/hexo-deploy</a></li>
<li><a href="https://github.com/zenghongtu/github-issue-to-hexo">https://github.com/zenghongtu/github-issue-to-hexo</a></li>
<li><a href="https://github.com/onblog/BlogHelper">https://github.com/onblog/BlogHelper</a></li>
<li><a href="https://github.com/JoeyBling/yilia-plus-demo">https://github.com/JoeyBling/yilia-plus-demo</a></li>
</ul>
]]></description>
                    <pubDate>Sun, 30 Oct 2022 06:53:48 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/4</guid>
                <link>https://github.com/cloudswave/blog/issues/4</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>Top</category>
            </item>
            <item>
                <title><![CDATA[CSDN博客接口分析]]></title>
                    <description><![CDATA[<div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> <span class="pl-s1">config</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">"./mcConfig"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">request</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">'request'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">querystring</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">'querystring'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-k">function</span> <span class="pl-en">createPost</span><span class="pl-kos">(</span><span class="pl-s1">oPost</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>

  <span class="pl-k">var</span> <span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">"https://mp.csdn.net/mdeditor/saveArticle"</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-s1">oBody</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
          <span class="pl-c1">title</span>: <span class="pl-s1">oPost</span><span class="pl-kos">.</span><span class="pl-c1">title</span><span class="pl-kos">,</span>
          <span class="pl-c1">markdowncontent</span>: <span class="pl-s1">oPost</span><span class="pl-kos">.</span><span class="pl-c1">body</span><span class="pl-kos">,</span>
          <span class="pl-c1">tags</span>:<span class="pl-s">"Fiori"</span><span class="pl-kos">,</span>
          <span class="pl-c1">categories</span>:<span class="pl-s">"Fiori"</span><span class="pl-kos">,</span>
          <span class="pl-c1">channel</span>:<span class="pl-s">"14"</span><span class="pl-kos">,</span>
          <span class="pl-c1">type</span>:<span class="pl-s">"original"</span><span class="pl-kos">,</span>
          <span class="pl-c1">articleedittype</span>:<span class="pl-s">"1"</span><span class="pl-kos">,</span>
          <span class="pl-c1">content</span>: <span class="pl-s1">oPost</span><span class="pl-kos">.</span><span class="pl-c1">body</span>
        <span class="pl-kos">}</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">formData</span> <span class="pl-c1">=</span> <span class="pl-s1">querystring</span><span class="pl-kos">.</span><span class="pl-en">stringify</span><span class="pl-kos">(</span><span class="pl-s1">oBody</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">contentLength</span> <span class="pl-c1">=</span> <span class="pl-s1">formData</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">createPostOptions</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
        <span class="pl-c1">url</span>: <span class="pl-s1">url</span><span class="pl-kos">,</span>
        <span class="pl-c1">method</span>: <span class="pl-s">"POST"</span><span class="pl-kos">,</span>  
        <span class="pl-c1">headers</span>: <span class="pl-kos">{</span>
            <span class="pl-s">"content-type"</span>: <span class="pl-s">"application/x-www-form-urlencoded"</span><span class="pl-kos">,</span>
            <span class="pl-s">"Content-Length"</span>: <span class="pl-s1">contentLength</span><span class="pl-kos">,</span>
            <span class="pl-s">"origin"</span> :<span class="pl-s">"https://mp.csdn.net"</span><span class="pl-kos">,</span>
            <span class="pl-s">"referer"</span> :<span class="pl-s">"https://mp.csdn.net/mdeditor"</span><span class="pl-kos">,</span>
            <span class="pl-s">"User-Agent"</span> :<span class="pl-s">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"</span><span class="pl-kos">,</span>
            <span class="pl-s">"cookie"</span>: <span class="pl-s1">config</span><span class="pl-kos">.</span><span class="pl-c1">cookie</span>
        <span class="pl-kos">}</span><span class="pl-kos">,</span>
        <span class="pl-c1">body</span>: <span class="pl-s1">formData</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span>

  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-v">Promise</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">resolve</span><span class="pl-kos">,</span><span class="pl-s1">reject</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
      <span class="pl-k">var</span> <span class="pl-s1">requestC</span> <span class="pl-c1">=</span> <span class="pl-s1">request</span><span class="pl-kos">.</span><span class="pl-en">defaults</span><span class="pl-kos">(</span><span class="pl-kos">{</span><span class="pl-c1">jar</span>: <span class="pl-c1">true</span><span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"Step1: create post via url: "</span>   <span class="pl-s1">url</span> <span class="pl-kos">)</span><span class="pl-kos">;</span>

      <span class="pl-s1">requestC</span><span class="pl-kos">(</span><span class="pl-s1">createPostOptions</span><span class="pl-kos">,</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">,</span><span class="pl-s1">response</span><span class="pl-kos">,</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
       
       <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
          <span class="pl-s1">reject</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
       <span class="pl-kos">}</span>
       <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"response: "</span>   <span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
       <span class="pl-s1">resolve</span><span class="pl-kos">(</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span> 
     <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-s1">createPost</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">request</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">'request'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-k">function</span> <span class="pl-en">getIssue</span><span class="pl-kos">(</span><span class="pl-s1">issueNumber</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>

  <span class="pl-k">var</span> <span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">"https://api.github.com/repos/i042416/KnowlegeRepository/issues/"</span><span class="pl-kos"></span>   <span class="pl-s1">issueNumber</span><span class="pl-kos">;</span>

  <span class="pl-k">var</span> <span class="pl-s1">getIssueOptions</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
        <span class="pl-c1">url</span>: <span class="pl-s1">url</span><span class="pl-kos">,</span>
        <span class="pl-c1">method</span>: <span class="pl-s">"GET"</span><span class="pl-kos">,</span>
        <span class="pl-c1">json</span>:<span class="pl-c1">true</span><span class="pl-kos">,</span>
        <span class="pl-c1">headers</span>: <span class="pl-kos">{</span>
            <span class="pl-s">"User-Agent"</span>: <span class="pl-s">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"</span>
        <span class="pl-kos">}</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>

  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-v">Promise</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">resolve</span><span class="pl-kos">,</span><span class="pl-s1">reject</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
      <span class="pl-k">var</span> <span class="pl-s1">requestC</span> <span class="pl-c1">=</span> <span class="pl-s1">request</span><span class="pl-kos">.</span><span class="pl-en">defaults</span><span class="pl-kos">(</span><span class="pl-kos">{</span><span class="pl-c1">jar</span>: <span class="pl-c1">true</span><span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"Step1: get issue detail via url: "</span>   <span class="pl-s1">url</span> <span class="pl-kos">)</span><span class="pl-kos">;</span>

      <span class="pl-s1">requestC</span><span class="pl-kos">(</span><span class="pl-s1">getIssueOptions</span><span class="pl-kos">,</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">,</span><span class="pl-s1">response</span><span class="pl-kos">,</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
        <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
          <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"error occurred: "</span>   <span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
          <span class="pl-s1">reject</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"title:"</span>   <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">title</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"body: "</span>   <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-k">for</span><span class="pl-kos">(</span> <span class="pl-k">var</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">labels</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span>  <span class="pl-kos">)</span><span class="pl-kos">{</span>
          <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"label: "</span>   <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">labels</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">.</span><span class="pl-c1">name</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
        <span class="pl-s1">resolve</span><span class="pl-kos">(</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span> 
     <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-s1">getIssue</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">readIssue</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">"./readIssueMod"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">createPost</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">"./createPostMod"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-s1">readIssue</span><span class="pl-kos">(</span><span class="pl-c1">2215</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-s1">createPost</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">catch</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-c1">=&gt;</span><span class="pl-kos">{</span><span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"error: "</span>   <span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p><a href="https://www.jianshu.com/p/ae4fe3c6ccf7" rel="nofollow">https://www.jianshu.com/p/ae4fe3c6ccf7</a></p>
]]></description>
                    <pubDate>Sun, 30 Oct 2022 06:44:45 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/5</guid>
                <link>https://github.com/cloudswave/blog/issues/5</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>随笔</category>
            </item>
            <item>
                <title><![CDATA[便签]]></title>
                    <description><![CDATA[<p>正则表达式提取issue url参数：</p>
<pre><code>&gt; reg = /\/(\w+)\/(\w+)\/issues\/(\w+)(\/?)$/
/\/(\w+)\/(\w+)\/issues\/(\w+)(\/?)$/
&gt; issue_url = "https://github.com/cloudswave/blog/issues/6/"
&gt; issue_url.match(reg)
[
  '/cloudswave/blog/issues/6/',
  'cloudswave',
  'blog',
  '6',
  '/',
  index: 18,
  input: 'https://github.com/cloudswave/blog/issues/6/',
  groups: undefined
]
</code></pre>
]]></description>
                    <pubDate>Sun, 30 Oct 2022 05:10:34 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/7</guid>
                <link>https://github.com/cloudswave/blog/issues/7</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[How to get and save the CSDN cookie as the secret]]></title>
                    <description><![CDATA[<ul>
<li>Press FN + F12 to the Dev Tools and select the network</li>
<li>Login the <a href="https://mp.csdn.net/" rel="nofollow">CSDN Blog</a>
</li>
<li>Find the Cookie</li>
<li>Copy the Cookie and save to the Repo Secrets Setting page</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198843510-5b7c7c37-e3c2-4d1b-9cac-c7bff5fd5961.png"><img width="959" alt="get-the-csdn-cookie" src="https://user-images.githubusercontent.com/5915548/198843510-5b7c7c37-e3c2-4d1b-9cac-c7bff5fd5961.png" style="max-width: 100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198843517-e563b5ef-3f42-423f-b9c5-1bcc793ffa4e.png"><img width="1094" alt="save-the-cookie" src="https://user-images.githubusercontent.com/5915548/198843517-e563b5ef-3f42-423f-b9c5-1bcc793ffa4e.png" style="max-width: 100%;"></a></p>
]]></description>
                    <pubDate>Sat, 29 Oct 2022 18:30:22 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/6</guid>
                <link>https://github.com/cloudswave/blog/issues/6</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>Guide</category>
            </item>
    </channel>
</rss>
