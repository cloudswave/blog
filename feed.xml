<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="rss.xsl" type="text/xsl"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"
>
    <channel>
            <title><![CDATA[EthanZhu's Blog]]></title>
            <link>https://github.com/cloudswave/blog</link>
        <atom:link href="https://github.com/cloudswave/blog/feed.xml" rel="self" type="application/rss+xml" />
            <description><![CDATA[RSS feed of EthanZhu's blog]]></description>
        <generator>IssueBlogAction</generator>
        <webMaster>bxb100@outlook.com (@bxb100)</webMaster>
            <language>zh-cn</language>
            <image>
                <url>https://cdn.jsdelivr.net/gh/cloudswave/blog/blog.png</url>
                    <title><![CDATA[EthanZhu's Blog]]></title>
                <link>https://github.com/cloudswave/blog</link>
            </image>
        <lastBuildDate>Mon, 23 Jan 2023 13:59:36 GMT</lastBuildDate>
            <item>
                <title><![CDATA[联想乐檬k3刷安卓5.1教程]]></title>
                    <description><![CDATA[<h2><a id="user-content-操作快捷键" class="anchor" aria-hidden="true" href="#操作快捷键"><span aria-hidden="true" class="octicon octicon-link"></span></a>操作快捷键</h2>
<ul>
<li>三键进recovery: 电源键+音量加+音量减</li>
<li>进入fastboot: 电源键+音量减</li>
<li>官方更多选择菜单：电源键+音量减</li>
<li>高通刷机：按住音量加+音量减然后插电脑usb，设备管理器会显示高通端口</li>
</ul>
<p>刷机包下载: <a href="https://pan.baidu.com/s/1tnf2xMoqtcL6p50ZiRYICw" rel="nofollow">https://pan.baidu.com/s/1tnf2xMoqtcL6p50ZiRYICw</a> 提取码:agjm
提示： 如果插电脑usb后供电不足反复重启，则电池触点正负极接线后使用充电宝供电</p>
<h2><a id="user-content-线刷51底包" class="anchor" aria-hidden="true" href="#线刷51底包"><span aria-hidden="true" class="octicon octicon-link"></span></a>线刷5.1底包</h2>
<p><code>联想乐檬K3安卓5.0以上底层线刷包.rar</code>中有线刷文件，驱动和工具
线刷工具使用参考：<a href="http://m.rom.7to.cn/jiaochengdetail/4292" rel="nofollow">http://m.rom.7to.cn/jiaochengdetail/4292</a></p>
<ol>
<li>
<p>先将官方刷机包解压到电脑上，然后再将刷机工具也解压，然后进入工具目录，找到并双击运行升级工具“QcomDLoader.exe”,</p>
</li>
<li>
<p>点击工具左侧的第一个按钮，也就是port上面那个齿轮按钮，点击后如下所示找到解压好的固件文件夹。
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976396-073045d4-2282-419a-8ad7-b72475747578.png"><img src="https://user-images.githubusercontent.com/5915548/213976396-073045d4-2282-419a-8ad7-b72475747578.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p>再点击工具左侧第二个按钮，也就是两个齿轮的按钮，弹出配置框，会看到框里有三个文件都在我们刚刚加载好的文件包中，这里默认不需要修改。所以点击OK即可：
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976398-ace4bc2a-c929-4676-b433-2d1d1ea9f49e.png"><img src="https://user-images.githubusercontent.com/5915548/213976398-ace4bc2a-c929-4676-b433-2d1d1ea9f49e.png" alt="image" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976397-6ed86dbb-3870-4bfd-8a12-b711bc9ee17d.png"><img src="https://user-images.githubusercontent.com/5915548/213976397-6ed86dbb-3870-4bfd-8a12-b711bc9ee17d.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p>点击左边第三个按钮，也就是一个箭头的按钮，点击之后，将手机关机，同时按住音量上键和下键不放，连接上电脑。走动进度条后松开两键，如下图
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976409-231b3823-23f6-4636-90d3-d7f002f2aa1f.png"><img src="https://user-images.githubusercontent.com/5915548/213976409-231b3823-23f6-4636-90d3-d7f002f2aa1f.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p>线刷升级过程中请不要触碰手机和数据线，升级时间一般为5分钟左右，请根据实际情况而定，线刷成功后如下图所示：再拔掉数据线，重装电池开机即可!
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/213976439-1e958b44-1676-471b-b660-a00f8246a871.png"><img src="https://user-images.githubusercontent.com/5915548/213976439-1e958b44-1676-471b-b660-a00f8246a871.png" alt="image" style="max-width: 100%;"></a></p>
</li>
</ol>
<h2><a id="user-content-卡刷魔趣51-64位系统" class="anchor" aria-hidden="true" href="#卡刷魔趣51-64位系统"><span aria-hidden="true" class="octicon octicon-link"></span></a>卡刷魔趣5.1-64位系统</h2>
<ol>
<li>线刷后，三键会进入到自带的奇兔recovery，双清格式化data分区</li>
<li>连接电脑后可以看到k30设备，将卡刷包<code>乐檬k3-卡刷魔趣android-5.1刷机包.zip</code>复制到设备中</li>
<li>recovery点击安装刚复制的卡刷包</li>
<li>显示完毕后重启手机</li>
</ol>
<h2><a id="user-content-scrcpy远程控制手机" class="anchor" aria-hidden="true" href="#scrcpy远程控制手机"><span aria-hidden="true" class="octicon octicon-link"></span></a>scrcpy远程控制手机</h2>
<p>参考：<a href="https://blog.csdn.net/liuqinhou/article/details/127460195" rel="nofollow">https://blog.csdn.net/liuqinhou/article/details/127460195</a></p>
<pre><code>adb connect 192.168.153.243 # 手机ip
scrcpy -b5M -m720 -Sw
</code></pre>
<table>
<thead>
<tr>
<th>Action</th>
<th>快捷键</th>
<th>快捷键 (macOS)</th>
</tr>
</thead>
<tbody>
<tr>
<td>切换全屏模式</td>
<td>Ctrl+f</td>
<td>Cmd+f</td>
</tr>
<tr>
<td>向左旋转屏幕</td>
<td>Ctrl+← (left)</td>
<td>Cmd+← (left)</td>
</tr>
<tr>
<td>向右旋转屏幕</td>
<td>Ctrl+→ (right)</td>
<td>Cmd+→ (right)</td>
</tr>
<tr>
<td>将窗口大小调整为1:1</td>
<td>Ctrl+g</td>
<td>Cmd+g</td>
</tr>
<tr>
<td>调整窗口大小以移除黑色边框</td>
<td>Ctrl+x | Double-click¹</td>
<td>Cmd+x | Double-click¹</td>
</tr>
<tr>
<td>点击 HOME</td>
<td>Ctrl+h | Middle-click</td>
<td>Ctrl+h | Middle-click</td>
</tr>
<tr>
<td>点击 BACK</td>
<td>Ctrl+b | Right-click²</td>
<td>Cmd+b | Right-click²</td>
</tr>
<tr>
<td>点击 APP_SWITCH</td>
<td>Ctrl+s</td>
<td>Cmd+s</td>
</tr>
<tr>
<td>点击 MENU</td>
<td>Ctrl+m</td>
<td>Ctrl+m</td>
</tr>
<tr>
<td>点击 VOLUME_UP</td>
<td>Ctrl+↑ (up)</td>
<td>Cmd+↑ (up)</td>
</tr>
<tr>
<td>点击 VOLUME_DOWN</td>
<td>Ctrl+↓ (down)</td>
<td>Cmd+↓ (down)</td>
</tr>
<tr>
<td>点击 POWER</td>
<td>Ctrl+p</td>
<td>Cmd+p</td>
</tr>
<tr>
<td>开机</td>
<td>Right-click²</td>
<td>Right-click²</td>
</tr>
<tr>
<td>关闭设备屏幕</td>
<td>Ctrl+o</td>
<td>Cmd+o</td>
</tr>
<tr>
<td>点亮设备屏幕</td>
<td>Ctrl+Shift+o</td>
<td>Cmd+Shift+o</td>
</tr>
<tr>
<td>旋转设备屏幕</td>
<td>Ctrl+r</td>
<td>Cmd+r</td>
</tr>
<tr>
<td>展开通知面板</td>
<td>Ctrl+n</td>
<td>Cmd+n</td>
</tr>
<tr>
<td>折叠通知面板</td>
<td>Ctrl+Shift+n</td>
<td>Cmd+Shift+n</td>
</tr>
<tr>
<td>将设备剪贴板复制到计算机</td>
<td>Ctrl+c</td>
<td>Cmd+c</td>
</tr>
<tr>
<td>将电脑剪贴板粘贴到设备上</td>
<td>Ctrl+v</td>
<td>Cmd+v</td>
</tr>
<tr>
<td>将计算机剪贴板复制到设备并粘贴</td>
<td>Ctrl+Shift+v</td>
<td>Cmd+Shift+v</td>
</tr>
<tr>
<td>启用/禁用帧率显示</td>
<td>Ctrl+i</td>
<td>Cmd+i</td>
</tr>
</tbody>
</table>
<h2><a id="user-content-安卓5安装termux" class="anchor" aria-hidden="true" href="#安卓5安装termux"><span aria-hidden="true" class="octicon octicon-link"></span></a>安卓5安装termux</h2>
<p>参考: <a href="https://github.com/termux/termux-app/wiki/Termux-on-android-5-or-6">https://github.com/termux/termux-app/wiki/Termux-on-android-5-or-6</a>
<a href="https://github.com/termux/termux-app/actions/workflows/debug_build.yml?query=branch%3Amaster+">最新版本github下载地址</a>
64位 <a href="https://wwuy.lanzoub.com/imQ8T0i4bd7e" rel="nofollow">termux-app_v0.118.0+be66cff-apt-android-5-github-debug_arm64-v8a.zip - 蓝奏云</a>
32位 <a href="https://wwuy.lanzoub.com/iq8cr0i4bdjg" rel="nofollow">termux-app_v0.118.0+be66cff-apt-android-5-github-debug_armeabi-v7a.zip - 蓝奏云</a></p>
<h2><a id="user-content-利用atilo安装ubuntu或debian和alist" class="anchor" aria-hidden="true" href="#利用atilo安装ubuntu或debian和alist"><span aria-hidden="true" class="octicon octicon-link"></span></a>利用Atilo安装ubuntu或debian和alist</h2>
<p>提示：安装ubuntu需要64位termux，安卓5的termux无法直接通过pkg install alist来安装alist，故需要通过其他linux安装</p>
<pre><code>echo "deb [trusted=yes arch=all] https://yadominjinta.github.io/files/ termux extras" &gt;&gt; $PREFIX/etc/apt/sources.list.d/atilo.list
apt update &amp;&amp; apt install atilo-cn
atilo images #可以安装的镜像列表
atilo pull ubuntu
ls ~/.atilo #可以备份该路径以便日后有问题恢复系统
atilo run ubuntu
# 以下为ubuntu下命令
apt install curl
curl -fsSL "https://alist.nn.ci/v3.sh" | bash -s install
/opt/alist/alist admin
/opt/alist/alist server
</code></pre>
<p>Atilo 是一个用来帮助你在termux上安装不同的GNU/Linux发行版的程序</p>
<pre><code>命令:
images           列出可用镜像
remove           移除本地的镜像
pull             拉取远程的镜像
run              运行镜像
clean            清除缓存
help             帮助
$ atilo images
+----------+------------+--------+--------+
|   名称   |    版本    | 已安装 | 可安装 |
+----------+------------+--------+--------+
|  alpine  |    3.12    | False  |  True  |
|  centos  |     8      | False  |  True  |
|  debian  |   buster   | False  |  True  |
|  fedora  |     33     | False  |  True  |
|   kali   |   latest   | False  |  True  |
| opensuse | Tumbleweed | False  |  True  |
|  ubuntu  |   focal    | False  |  True  |
+----------+------------+--------+--------+
</code></pre>

]]></description>
                    <pubDate>Mon, 23 Jan 2023 13:59:18 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/18</guid>
                <link>https://github.com/cloudswave/blog/issues/18</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[安卓5下Termux通过ubuntu安装alist]]></title>
                    <description><![CDATA[<p>安卓7以上可以直接通过pkg install alist来安装alist，安卓5安装ubuntu需要64位termux，通过Atilo套娃其他linux来安装alist</p>
<h2><a id="user-content-安装" class="anchor" aria-hidden="true" href="#安装"><span aria-hidden="true" class="octicon octicon-link"></span></a>安装</h2>
<p>termux下：</p>
<pre><code>apt install tmux
echo "deb [trusted=yes arch=all] https://yadominjinta.github.io/files/ termux extras" &gt;&gt; $PREFIX/etc/apt/sources.list.d/atilo.list
apt update &amp;&amp; apt install atilo-cn
atilo images #可以安装的镜像列表
atilo pull ubuntu
ls ~/.atilo #可以备份该路径以便日后有问题恢复系统
atilo run ubuntu #启动进入ubuntu
</code></pre>
<p>ubuntu下：</p>
<pre><code>apt install curl
apt install tmux
curl -fsSL "https://alist.nn.ci/v3.sh" | bash -s install
/opt/alist/alist admin #查看密码
/opt/alist/alist server
</code></pre>
<p>Atilo介绍：</p>
<pre><code>Atilo 是一个用来帮助你在termux上安装不同的GNU/Linux发行版的程序
命令:
images 列出可用镜像
remove 移除本地的镜像
pull 拉取远程的镜像
run 运行镜像
clean 清除缓存
help 帮助

$ atilo images
+----------+------------+--------+--------+
| 名称 | 版本 | 已安装 | 可安装 |
+----------+------------+--------+--------+
| alpine | 3.12 | False | True |
| centos | 8 | False | True |
| debian | buster | False | True |
| fedora | 33 | False | True |
| kali | latest | False | True |
| opensuse | Tumbleweed | False | True |
| ubuntu | focal | False | True |
+----------+------------+--------+--------+
</code></pre>
<h2><a id="user-content-自启配置" class="anchor" aria-hidden="true" href="#自启配置"><span aria-hidden="true" class="octicon octicon-link"></span></a>自启配置</h2>
<p>termux下：</p>
<pre><code>echo "~/startup.sh" &gt;&gt; ~/.bashrc
echo "~/startup.sh" &gt;&gt; ~/.atilo/ubuntu/root/.bashrc
</code></pre>
<p>vi ~/startup.sh增加：</p>
<pre><code>if pgrep -x "ubuntu" &gt;/dev/null
  then
    echo "ubuntu运行中..."
  else
  tmux new -d -s ubuntu 'atilo run ubuntu'
  echo "ubuntu已开启..."
fi
</code></pre>
<p>vi ~/.atilo/ubuntu/root/startup.sh：</p>
<pre><code>if pgrep -x "alist" &gt;/dev/null
  then
    echo "alist运行中..."
  else
  tmux new -d -s alist '/opt/alist/alist server'
  echo "alist已开启..."
fi
</code></pre>
]]></description>
                    <pubDate>Mon, 23 Jan 2023 09:44:16 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/19</guid>
                <link>https://github.com/cloudswave/blog/issues/19</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[termux nginx配置多网站示例]]></title>
                    <description><![CDATA[<pre><code># pwd
/data/data/com.termux/files/usr/etc/nginx
# vi nginx.conf 
</code></pre>
<p>修改nginx配置文件示例如下，配置了8080和8081两个端口：</p>
<pre><code>#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /data/data/com.termux/files/home/www;
            index  index.php index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/data/com.termux/files/home/www;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        # location ~ \.php$ {
        location ~ .*.php(/.*)*$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /data/data/com.termux/files/home/www$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    server {
        listen       8081;
        server_name  localhost;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /data/data/com.termux/files/home/music;
            index  index.php index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/data/com.termux/files/home/www;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  /data/data/com.termux/files/home/music$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
</code></pre>
]]></description>
                    <pubDate>Sun, 25 Dec 2022 09:51:10 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/17</guid>
                <link>https://github.com/cloudswave/blog/issues/17</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[挂载alist webdav]]></title>
                    <description><![CDATA[<p>mount -t davfs <a href="http://141.147.162.129:5244/dav" rel="nofollow">http://141.147.162.129:5244/dav</a>  ~/alist</p>
]]></description>
                    <pubDate>Fri, 16 Dec 2022 13:14:07 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/10</guid>
                <link>https://github.com/cloudswave/blog/issues/10</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[fiddler抓包edge要设置使用系统代理]]></title>
                    <description><![CDATA[<p>fiddler抓包edge要设置使用系统代理</p>
]]></description>
                    <pubDate>Thu, 15 Dec 2022 01:40:24 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/16</guid>
                <link>https://github.com/cloudswave/blog/issues/16</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[nginx和php-fpm以root用户运行]]></title>
                    <description><![CDATA[<p><strong>开启root权限，请谨慎使用！！！</strong>
为了使KodExplorer能读写root用户数据需要修改nginx，php-fpm运行用户为root，下面为修改笔记</p>
<ul>
<li>nginx version: nginx/1.18.0 (Ubuntu)</li>
<li>PHP 8.1</li>
</ul>
<p>sudo vi /etc/nginx/nginx.conf</p>
<pre><code>user root; #第一行
...
</code></pre>
<p>sudo vi /etc/php/8.1/fpm/pool.d/<a href="http://www.conf" rel="nofollow">www.conf</a></p>
<pre><code>...
# 修改两处
listen.owner = root
listen.group = root
...
user = root
group = root
</code></pre>
<p>sudo vi /lib/systemd/system/php8.1-fpm.service</p>
<pre><code># 加上-R允许root执行
...
ExecStart=/usr/sbin/php-fpm8.1 -R --nodaemonize --fpm-config /etc/php/8.1/fpm/php-fpm.conf
...
</code></pre>
<p>防火墙问题可能导致80端口无法访问</p>
<pre><code># 如果外网无法访问请关闭防火墙或者添加规则
service iptables stop 
iptables -I INPUT -p tcp --dport 80 -j ACCEPT
</code></pre>
<p>重启服务</p>
<pre><code>systemctl daemon-reload # php8.1-fpm.service修改刷新
/etc/init.d/php8.1-fpm restart
/etc/init.d/nginx restart

# check php8.1-fpm.sock是否生成
ls /run/php/
</code></pre>

]]></description>
                    <pubDate>Sun, 11 Dec 2022 12:54:25 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/15</guid>
                <link>https://github.com/cloudswave/blog/issues/15</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[docker kodexplorer]]></title>
                    <description><![CDATA[<pre><code> docker run -d \
--name kode \
-e PUID=$UID \
-e PGID=$GID \
-p 80:80 \
-v /root/kode:/var/www/html \
-v /root:/father \
kodcloud/kodexplorer
</code></pre>
]]></description>
                    <pubDate>Sat, 10 Dec 2022 18:23:43 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/14</guid>
                <link>https://github.com/cloudswave/blog/issues/14</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[给rm增加回收站，安全的使用rm命令]]></title>
                    <description><![CDATA[<pre><code>#!/usr/bin/env bash
#
# Description: 给rm命令增加回收站
# System Required: CentOS/Debian/Ubuntu
# Version: 1.0.0

cat &gt; /usr/local/bin/rm.sh &lt;&lt; 'EOF'
#!/bin/bash 

RECYCLE=~/.local/share/Trash/files
test ! -d ${RECYCLE} &amp;&amp; mkdir -p ${RECYCLE} #if not trash folder,create one  
_datedir=`date +"%Y%m%d"`  
_dstdir=${RECYCLE}/${_datedir}  
test ! -d ${_dstdir} &amp;&amp; mkdir -p ${_dstdir} #if not trash folder,create one  

for _parms in $*  
do  
if [ -d ${_parms} ] || [ -f ${_parms} ];then  
  test -d ${_parms} &amp;&amp; echo "${_parms} is directory" &amp;&amp; mv ${_parms} ${_dstdir}/  
  test -f ${_parms} &amp;&amp; echo "${_parms} is file" &amp;&amp; mv ${_parms} ${_dstdir}/  
  else   echo "${_parms} is not directory or file"  
fi  
done
EOF

chmod +x /usr/local/bin/rm.sh
echo "alias rm='/usr/local/bin/rm.sh'" &gt;&gt; ~/.bashrc
echo "alias surm='/bin/rm -i'" &gt;&gt; ~/.bashrc
echo "alias rmt='/bin/rm -i -r ~/.local/share/Trash/files/*'" &gt;&gt; ~/.bashrc # 一键清理回收站命令: rmt -f

source ~/.bashrc
</code></pre>

]]></description>
                    <pubDate>Sat, 10 Dec 2022 14:50:48 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/13</guid>
                <link>https://github.com/cloudswave/blog/issues/13</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[docker版alist和aria2配合使用]]></title>
                    <description><![CDATA[<pre><code>docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 --name="alist" xhofe/alist:latest

docker run -d \
--name aria2 \
--restart unless-stopped \
--log-opt max-size=1m \
-e PUID=$UID \
-e PGID=$GID \
-e UMASK_SET=022 \
-e RPC_SECRET=pac_password \
-e RPC_PORT=6800 \
-e LISTEN_PORT=6888 \
-p 16800:6800 \
-p 16888:6888 \
-p 16888:6888/udp \
-v /root/aria2/config:/config \
-v /etc/alist/temp/downloads:/downloads \
-v /etc/alist/temp/aria2:/opt/alist/data/temp/aria2 \
p3terx/aria2-pro
</code></pre>
<p>-v /etc/alist/temp/aria2:/opt/alist/data/temp/aria2 注意这个地方是为了让离线下载路径可以共享，并且只能在同一台服务器上否则离线下载后复制到某个存储下面时会报transfer失败
参考：<a href="https://alist.nn.ci/zh/guide/install/docker.html" rel="nofollow">https://alist.nn.ci/zh/guide/install/docker.html</a></p>

]]></description>
                    <pubDate>Fri, 09 Dec 2022 08:02:00 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/12</guid>
                <link>https://github.com/cloudswave/blog/issues/12</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[finalshell配置备份同步]]></title>
                    <description><![CDATA[<p>备份同步以下文件：</p>
<pre><code>/Users/$USER/Library/FinalShell/conn/
/Users/$USER/Library/FinalShell/config.json
/Users/$USER/Library/FinalShell/knownhosts.json
/Users/$USER/Library/FinalShell/config.json
</code></pre>
<p>/conn #服务器连接信息配置文件夹
config.json #基本配置文件
knownhosts.json #服务器密钥
tconfig.json #一些缓存</p>

]]></description>
                    <pubDate>Tue, 06 Dec 2022 05:00:31 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/11</guid>
                <link>https://github.com/cloudswave/blog/issues/11</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[禁用win10自动更新]]></title>
                    <description><![CDATA[<p>管理员运行cmd：</p>
<pre><code>takeown /F C:\Windows\SoftwareDistribution /A /R
Icacls C:\Windows\SoftwareDistribution /deny system:(OI)(CI)(W)
Icacls C:\Windows\SoftwareDistribution /deny "ALL APPLICATION PACKAGES:(OI)(CI)(W)"
</code></pre>

]]></description>
                    <pubDate>Sat, 12 Nov 2022 09:08:16 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/9</guid>
                <link>https://github.com/cloudswave/blog/issues/9</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>搞机</category>
            </item>
            <item>
                <title><![CDATA[测试issue2blog]]></title>
                    <description><![CDATA[<h2><a id="user-content-标题" class="anchor" aria-hidden="true" href="#标题"><span aria-hidden="true" class="octicon octicon-link"></span></a>标题</h2>
<p>一级标题:    # 标题<br>
二级标题:   ## 标题<br>
三级标题:     ### 标题<br>
四级标题:    #### 标题<br>
五级标题:     #### 标题</p>
<h2><a id="user-content-加粗" class="anchor" aria-hidden="true" href="#加粗"><span aria-hidden="true" class="octicon octicon-link"></span></a>加粗</h2>
<p><strong>加粗</strong></p>

<h2><a id="user-content-图片" class="anchor" aria-hidden="true" href="#图片"><span aria-hidden="true" class="octicon octicon-link"></span></a>图片</h2>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://camo.githubusercontent.com/5ddad46642a2c8b0ac8a83c25b204e21c16d8523bb5d51c23084866c9e32aee8/68747470733a2f2f7777772e696d6775726c2e6f72672f7374617469632f696d616765732f6c756f79652e6a7067"><img src="https://camo.githubusercontent.com/5ddad46642a2c8b0ac8a83c25b204e21c16d8523bb5d51c23084866c9e32aee8/68747470733a2f2f7777772e696d6775726c2e6f72672f7374617469632f696d616765732f6c756f79652e6a7067" alt="落叶" data-canonical-src="https://www.imgurl.org/static/images/luoye.jpg" style="max-width: 100%;"></a></p>
<h2><a id="user-content-超链接" class="anchor" aria-hidden="true" href="#超链接"><span aria-hidden="true" class="octicon octicon-link"></span></a>超链接</h2>
<p><a href="http://baidu.com" rel="nofollow">百度</a></p>
<h2><a id="user-content-斜体" class="anchor" aria-hidden="true" href="#斜体"><span aria-hidden="true" class="octicon octicon-link"></span></a>斜体</h2>
<p><em>斜体</em></p>
<h2><a id="user-content-粗斜体" class="anchor" aria-hidden="true" href="#粗斜体"><span aria-hidden="true" class="octicon octicon-link"></span></a>粗斜体</h2>
<p><em><strong>粗斜体</strong></em></p>
<h2><a id="user-content-代码块" class="anchor" aria-hidden="true" href="#代码块"><span aria-hidden="true" class="octicon octicon-link"></span></a>代码块</h2>
<pre><code>code.
</code></pre>
<h2><a id="user-content-分割线" class="anchor" aria-hidden="true" href="#分割线"><span aria-hidden="true" class="octicon octicon-link"></span></a>分割线</h2>
<p>Hello</p>

]]></description>
                    <pubDate>Sun, 30 Oct 2022 09:30:51 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/1</guid>
                <link>https://github.com/cloudswave/blog/issues/1</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>测试</category>
            </item>
            <item>
                <title><![CDATA[Github issue update Api]]></title>
                    <description><![CDATA[<p>Github issue update js api:</p>
<pre><code>// Octokit.js
// https://github.com/octokit/core.js#readme
const octokit = new Octokit({
  auth: 'YOUR-TOKEN'
})

await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {
  owner: 'OWNER',
  repo: 'REPO',
  issue_number: 'ISSUE_NUMBER',
  title: 'Found a bug',
  body: 'I\'m having a problem with this.',
  assignees: [
    'octocat'
  ],
  milestone: 1,
  state: 'open',
  labels: [
    'bug'
  ]
})
</code></pre>
<p><a href="https://docs.github.com/cn/rest/issues/issues#update-an-issue">https://docs.github.com/cn/rest/issues/issues#update-an-issue</a></p>

]]></description>
                    <pubDate>Sun, 30 Oct 2022 09:17:03 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/8</guid>
                <link>https://github.com/cloudswave/blog/issues/8</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[开始使用Github Issues写博客]]></title>
                    <description><![CDATA[<h2><a id="user-content-背景" class="anchor" aria-hidden="true" href="#背景"><span aria-hidden="true" class="octicon octicon-link"></span></a>背景</h2>
<ul>
<li>简书频繁下架文章，每天只能发布两篇</li>
<li>CSDN页面太杂，写作不够专注，客户端不好用</li>
<li>Github Web版和App都非常简洁实用，可以随意写文章不需要担心审核问题</li>
<li>可以通过Actions工作流来同步文章到Github Pages和其他博客平台</li>
<li>学习Github Action开发，学习机遇Github到自动化构建部署流程</li>
</ul>


<h2><a id="user-content-需求和实现" class="anchor" aria-hidden="true" href="#需求和实现"><span aria-hidden="true" class="octicon octicon-link"></span></a>需求和实现</h2>
<h3><a id="user-content-自动生成readme目录" class="anchor" aria-hidden="true" href="#自动生成readme目录"><span aria-hidden="true" class="octicon octicon-link"></span></a>自动生成README目录</h3>
<p>仿照<a href="https://github.com/cloudswave/blog/blob/master/.github/workflows/issue2readme.yaml">.github/workflows/issue2readme.yaml</a>在仓库里增加workflows配置文件进行修改，<a href="https://github.com/bxb100/issueblog#readme">说明文档</a>，最后生成<a href="https://github.com/cloudswave/blog/#readme">效果</a></p>
<h3><a id="user-content-自动构建hexo发布到github-pages" class="anchor" aria-hidden="true" href="#自动构建hexo发布到github-pages"><span aria-hidden="true" class="octicon octicon-link"></span></a>自动构建Hexo发布到Github Pages</h3>
<p>仿照<a href="https://github.com/cloudswave/blog/blob/master/.github/workflows/issue2hexo.yaml">.github/workflows/issue2hexo.yaml</a>在仓库里增加workflows配置文件，根据自身情况修改环境变量，最后发布的效果可查看<a href="http://cloudswave.github.io" rel="nofollow">我的Hexo博客</a></p>
<pre><code>env:
  # github pages repo
  PUBLISH_REPOSITORY: cloudswave/cloudswave.github.io
  # GITHUB TOKEN 可以试一试将secrets.BLOG_TOKEN可以直接改成github内置的密钥secrets.BLOG_TOKEN，但是我的会报如下图的权限错误
  GITHUB_TOKEN: ${{ secrets.BLOG_TOKEN }}
</code></pre>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198711776-db2ff7fc-f7ec-4eec-b67f-8a1d162a1964.png"><img src="https://user-images.githubusercontent.com/5915548/198711776-db2ff7fc-f7ec-4eec-b67f-8a1d162a1964.png" alt="image" style="max-width: 100%;"></a></p>
<p>BLOG_TOKEN生成指导：</p>
<ol>
<li>
<p><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#creating-a-personal-access-token-classic">creating-a-personal-access-token-classic</a>不知道选那些权限选择的时候全部选上吧
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198711260-eb252739-105f-472b-8894-a016fc1d28ad.png"><img src="https://user-images.githubusercontent.com/5915548/198711260-eb252739-105f-472b-8894-a016fc1d28ad.png" alt="image" style="max-width: 100%;"></a></p>
</li>
<li>
<p><a href="https://docs.github.com/cn/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">creating-encrypted-secrets-for-a-repository</a></p>
</li>
</ol>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198710315-f180cdb0-baa8-4c16-aa92-fed599bd354f.png"><img src="https://user-images.githubusercontent.com/5915548/198710315-f180cdb0-baa8-4c16-aa92-fed599bd354f.png" alt="image" style="max-width: 100%;"></a>
<strong>另外还需要Pages仓库的权限配置</strong>，如下图：
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198712542-b1c8edfc-4170-426b-885c-0ba691a6934b.png"><img src="https://user-images.githubusercontent.com/5915548/198712542-b1c8edfc-4170-426b-885c-0ba691a6934b.png" alt="image" style="max-width: 100%;"></a>
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198712367-39502701-4d41-4468-97b7-9b808b92ae62.png"><img src="https://user-images.githubusercontent.com/5915548/198712367-39502701-4d41-4468-97b7-9b808b92ae62.png" alt="image" style="max-width: 100%;"></a></p>
<h3><a id="user-content-自动发布文章到其他博客平台用来引流" class="anchor" aria-hidden="true" href="#自动发布文章到其他博客平台用来引流"><span aria-hidden="true" class="octicon octicon-link"></span></a>自动发布文章到其他博客平台用来引流</h3>
<ul>
<li>发布到CSDN, 参考<a href="https://github.com/cloudswave/blog/blob/master/.github/workflows/issue2csdn.yml">issue2csdn</a>增加workflows配置文件，<a href="https://github.com/cloudswave/issue2csdn#readme">说明文档</a>
</li>
</ul>
<h3><a id="user-content-提示" class="anchor" aria-hidden="true" href="#提示"><span aria-hidden="true" class="octicon octicon-link"></span></a>提示</h3>
<p>如果你只想在issue添加Miestone为publish的时候才发布更新，可以修改yml里的触发器，如：</p>
<pre><code>on:
  issues:
    # Sufficient to trigger this workflow when an issue is milestoned
    types: [milestoned]
    # types: [unlabeled, labeled, edited, milestoned]
</code></pre>
<p>可以在Actions页面查看workflow执行日志和禁止某个workflow执行
<a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198864861-03313485-2a81-4f76-ba44-ec24254a619a.png"><img width="805" alt="action-guide" src="https://user-images.githubusercontent.com/5915548/198864861-03313485-2a81-4f76-ba44-ec24254a619a.png" style="max-width: 100%;"></a></p>
<h2><a id="user-content-参考文档" class="anchor" aria-hidden="true" href="#参考文档"><span aria-hidden="true" class="octicon octicon-link"></span></a>参考文档</h2>
<ul>
<li><a href="https://github.com/Solybum/hexo-deploy">https://github.com/Solybum/hexo-deploy</a></li>
<li><a href="https://github.com/zenghongtu/github-issue-to-hexo">https://github.com/zenghongtu/github-issue-to-hexo</a></li>
<li><a href="https://github.com/onblog/BlogHelper">https://github.com/onblog/BlogHelper</a></li>
<li><a href="https://github.com/JoeyBling/yilia-plus-demo">https://github.com/JoeyBling/yilia-plus-demo</a></li>
</ul>
]]></description>
                    <pubDate>Sun, 30 Oct 2022 06:53:48 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/4</guid>
                <link>https://github.com/cloudswave/blog/issues/4</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>Top</category>
            </item>
            <item>
                <title><![CDATA[CSDN博客接口分析]]></title>
                    <description><![CDATA[<div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> <span class="pl-s1">config</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">"./mcConfig"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">request</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">'request'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">querystring</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">'querystring'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-k">function</span> <span class="pl-en">createPost</span><span class="pl-kos">(</span><span class="pl-s1">oPost</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>

  <span class="pl-k">var</span> <span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">"https://mp.csdn.net/mdeditor/saveArticle"</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-s1">oBody</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
          <span class="pl-c1">title</span>: <span class="pl-s1">oPost</span><span class="pl-kos">.</span><span class="pl-c1">title</span><span class="pl-kos">,</span>
          <span class="pl-c1">markdowncontent</span>: <span class="pl-s1">oPost</span><span class="pl-kos">.</span><span class="pl-c1">body</span><span class="pl-kos">,</span>
          <span class="pl-c1">tags</span>:<span class="pl-s">"Fiori"</span><span class="pl-kos">,</span>
          <span class="pl-c1">categories</span>:<span class="pl-s">"Fiori"</span><span class="pl-kos">,</span>
          <span class="pl-c1">channel</span>:<span class="pl-s">"14"</span><span class="pl-kos">,</span>
          <span class="pl-c1">type</span>:<span class="pl-s">"original"</span><span class="pl-kos">,</span>
          <span class="pl-c1">articleedittype</span>:<span class="pl-s">"1"</span><span class="pl-kos">,</span>
          <span class="pl-c1">content</span>: <span class="pl-s1">oPost</span><span class="pl-kos">.</span><span class="pl-c1">body</span>
        <span class="pl-kos">}</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">formData</span> <span class="pl-c1">=</span> <span class="pl-s1">querystring</span><span class="pl-kos">.</span><span class="pl-en">stringify</span><span class="pl-kos">(</span><span class="pl-s1">oBody</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">contentLength</span> <span class="pl-c1">=</span> <span class="pl-s1">formData</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">createPostOptions</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
        <span class="pl-c1">url</span>: <span class="pl-s1">url</span><span class="pl-kos">,</span>
        <span class="pl-c1">method</span>: <span class="pl-s">"POST"</span><span class="pl-kos">,</span>  
        <span class="pl-c1">headers</span>: <span class="pl-kos">{</span>
            <span class="pl-s">"content-type"</span>: <span class="pl-s">"application/x-www-form-urlencoded"</span><span class="pl-kos">,</span>
            <span class="pl-s">"Content-Length"</span>: <span class="pl-s1">contentLength</span><span class="pl-kos">,</span>
            <span class="pl-s">"origin"</span> :<span class="pl-s">"https://mp.csdn.net"</span><span class="pl-kos">,</span>
            <span class="pl-s">"referer"</span> :<span class="pl-s">"https://mp.csdn.net/mdeditor"</span><span class="pl-kos">,</span>
            <span class="pl-s">"User-Agent"</span> :<span class="pl-s">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"</span><span class="pl-kos">,</span>
            <span class="pl-s">"cookie"</span>: <span class="pl-s1">config</span><span class="pl-kos">.</span><span class="pl-c1">cookie</span>
        <span class="pl-kos">}</span><span class="pl-kos">,</span>
        <span class="pl-c1">body</span>: <span class="pl-s1">formData</span>
<span class="pl-kos">}</span><span class="pl-kos">;</span>

  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-v">Promise</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">resolve</span><span class="pl-kos">,</span><span class="pl-s1">reject</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
      <span class="pl-k">var</span> <span class="pl-s1">requestC</span> <span class="pl-c1">=</span> <span class="pl-s1">request</span><span class="pl-kos">.</span><span class="pl-en">defaults</span><span class="pl-kos">(</span><span class="pl-kos">{</span><span class="pl-c1">jar</span>: <span class="pl-c1">true</span><span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"Step1: create post via url: "</span>   <span class="pl-s1">url</span> <span class="pl-kos">)</span><span class="pl-kos">;</span>

      <span class="pl-s1">requestC</span><span class="pl-kos">(</span><span class="pl-s1">createPostOptions</span><span class="pl-kos">,</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">,</span><span class="pl-s1">response</span><span class="pl-kos">,</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
       
       <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
          <span class="pl-s1">reject</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
       <span class="pl-kos">}</span>
       <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"response: "</span>   <span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
       <span class="pl-s1">resolve</span><span class="pl-kos">(</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span> 
     <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-s1">createPost</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">request</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">'request'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-k">function</span> <span class="pl-en">getIssue</span><span class="pl-kos">(</span><span class="pl-s1">issueNumber</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>

  <span class="pl-k">var</span> <span class="pl-s1">url</span> <span class="pl-c1">=</span> <span class="pl-s">"https://api.github.com/repos/i042416/KnowlegeRepository/issues/"</span><span class="pl-kos"></span>   <span class="pl-s1">issueNumber</span><span class="pl-kos">;</span>

  <span class="pl-k">var</span> <span class="pl-s1">getIssueOptions</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span>
        <span class="pl-c1">url</span>: <span class="pl-s1">url</span><span class="pl-kos">,</span>
        <span class="pl-c1">method</span>: <span class="pl-s">"GET"</span><span class="pl-kos">,</span>
        <span class="pl-c1">json</span>:<span class="pl-c1">true</span><span class="pl-kos">,</span>
        <span class="pl-c1">headers</span>: <span class="pl-kos">{</span>
            <span class="pl-s">"User-Agent"</span>: <span class="pl-s">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36"</span>
        <span class="pl-kos">}</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>

  <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-v">Promise</span><span class="pl-kos">(</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">resolve</span><span class="pl-kos">,</span><span class="pl-s1">reject</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
      <span class="pl-k">var</span> <span class="pl-s1">requestC</span> <span class="pl-c1">=</span> <span class="pl-s1">request</span><span class="pl-kos">.</span><span class="pl-en">defaults</span><span class="pl-kos">(</span><span class="pl-kos">{</span><span class="pl-c1">jar</span>: <span class="pl-c1">true</span><span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"Step1: get issue detail via url: "</span>   <span class="pl-s1">url</span> <span class="pl-kos">)</span><span class="pl-kos">;</span>

      <span class="pl-s1">requestC</span><span class="pl-kos">(</span><span class="pl-s1">getIssueOptions</span><span class="pl-kos">,</span><span class="pl-k">function</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">,</span><span class="pl-s1">response</span><span class="pl-kos">,</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
        <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">{</span>
          <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"error occurred: "</span>   <span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
          <span class="pl-s1">reject</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"title:"</span>   <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">title</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"body: "</span>   <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-k">for</span><span class="pl-kos">(</span> <span class="pl-k">var</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">labels</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span>  <span class="pl-kos">)</span><span class="pl-kos">{</span>
          <span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"label: "</span>   <span class="pl-s1">body</span><span class="pl-kos">.</span><span class="pl-c1">labels</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">.</span><span class="pl-c1">name</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
        <span class="pl-kos">}</span>
        <span class="pl-s1">resolve</span><span class="pl-kos">(</span><span class="pl-s1">body</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
      <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span> 
     <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span>

<span class="pl-smi">module</span><span class="pl-kos">.</span><span class="pl-c1">exports</span> <span class="pl-c1">=</span> <span class="pl-s1">getIssue</span><span class="pl-kos">;</span>

<span class="pl-k">var</span> <span class="pl-s1">readIssue</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">"./readIssueMod"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">createPost</span> <span class="pl-c1">=</span> <span class="pl-en">require</span><span class="pl-kos">(</span><span class="pl-s">"./createPostMod"</span><span class="pl-kos">)</span><span class="pl-kos">;</span>

<span class="pl-s1">readIssue</span><span class="pl-kos">(</span><span class="pl-c1">2215</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">then</span><span class="pl-kos">(</span><span class="pl-s1">createPost</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">catch</span><span class="pl-kos">(</span><span class="pl-kos">(</span><span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-c1">=&gt;</span><span class="pl-kos">{</span><span class="pl-smi">console</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">"error: "</span>   <span class="pl-s1">error</span><span class="pl-kos">)</span><span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p><a href="https://www.jianshu.com/p/ae4fe3c6ccf7" rel="nofollow">https://www.jianshu.com/p/ae4fe3c6ccf7</a></p>
]]></description>
                    <pubDate>Sun, 30 Oct 2022 06:44:45 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/5</guid>
                <link>https://github.com/cloudswave/blog/issues/5</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>随笔</category>
            </item>
            <item>
                <title><![CDATA[便签]]></title>
                    <description><![CDATA[<p>正则表达式提取issue url参数：</p>
<pre><code>&gt; reg = /\/(\w+)\/(\w+)\/issues\/(\w+)(\/?)$/
/\/(\w+)\/(\w+)\/issues\/(\w+)(\/?)$/
&gt; issue_url = "https://github.com/cloudswave/blog/issues/6/"
&gt; issue_url.match(reg)
[
  '/cloudswave/blog/issues/6/',
  'cloudswave',
  'blog',
  '6',
  '/',
  index: 18,
  input: 'https://github.com/cloudswave/blog/issues/6/',
  groups: undefined
]
</code></pre>
]]></description>
                    <pubDate>Sun, 30 Oct 2022 05:10:34 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/7</guid>
                <link>https://github.com/cloudswave/blog/issues/7</link>
                    <author><![CDATA[cloudswave]]></author>
            </item>
            <item>
                <title><![CDATA[How to get and save the CSDN cookie as the secret]]></title>
                    <description><![CDATA[<ul>
<li>Press FN + F12 to the Dev Tools and select the network</li>
<li>Login the <a href="https://mp.csdn.net/" rel="nofollow">CSDN Blog</a>
</li>
<li>Find the Cookie</li>
<li>Copy the Cookie and save to the Repo Secrets Setting page</li>
</ul>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198843510-5b7c7c37-e3c2-4d1b-9cac-c7bff5fd5961.png"><img width="959" alt="get-the-csdn-cookie" src="https://user-images.githubusercontent.com/5915548/198843510-5b7c7c37-e3c2-4d1b-9cac-c7bff5fd5961.png" style="max-width: 100%;"></a></p>
<p><a target="_blank" rel="noopener noreferrer nofollow" href="https://user-images.githubusercontent.com/5915548/198843517-e563b5ef-3f42-423f-b9c5-1bcc793ffa4e.png"><img width="1094" alt="save-the-cookie" src="https://user-images.githubusercontent.com/5915548/198843517-e563b5ef-3f42-423f-b9c5-1bcc793ffa4e.png" style="max-width: 100%;"></a></p>
]]></description>
                    <pubDate>Sat, 29 Oct 2022 18:30:22 GMT</pubDate>
                        <guid isPermaLink="false">https://github.com/cloudswave/blog/issues/6</guid>
                <link>https://github.com/cloudswave/blog/issues/6</link>
                    <author><![CDATA[cloudswave]]></author>
                        <category>Guide</category>
            </item>
    </channel>
</rss>
